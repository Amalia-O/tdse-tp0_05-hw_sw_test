
tdse-tp0_05-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  000050ac  2**0
                  CONTENTS
  4 .ARM          00000000  08003470  08003470  000050ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003470  08003470  000050ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003470  08003470  00004470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003474  08003474  00004474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08003478  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200000ac  08003524  000050ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08003524  00005360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007759  00000000  00000000  000050d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d5  00000000  00000000  0000c82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000e208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000525  00000000  00000000  0000e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f2c  00000000  00000000  0000ee0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6a2  00000000  00000000  00026d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c2f  00000000  00000000  000313db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b400a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e8  00000000  00000000  000b4050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000b6638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	0800319c 	.word	0x0800319c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	0800319c 	.word	0x0800319c

0800014c <app_init>:
 * The function definition consists of actual statements which are executed
 * when the function is called (i.e. when the program control comes to the
 * function).
 */
void app_init(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8000152:	b672      	cpsid	i
 8000154:	4b43      	ldr	r3, [pc, #268]	@ (8000264 <app_init+0x118>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a43      	ldr	r2, [pc, #268]	@ (8000268 <app_init+0x11c>)
 800015a:	213f      	movs	r1, #63	@ 0x3f
 800015c:	4618      	mov	r0, r3
 800015e:	f002 f875 	bl	800224c <sniprintf>
 8000162:	4603      	mov	r3, r0
 8000164:	4a41      	ldr	r2, [pc, #260]	@ (800026c <app_init+0x120>)
 8000166:	6013      	str	r3, [r2, #0]
 8000168:	4b3e      	ldr	r3, [pc, #248]	@ (8000264 <app_init+0x118>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 f973 	bl	8000458 <logger_log_print_>
 8000172:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 8000174:	b672      	cpsid	i
 8000176:	4b3b      	ldr	r3, [pc, #236]	@ (8000264 <app_init+0x118>)
 8000178:	681c      	ldr	r4, [r3, #0]
 800017a:	f000 fdb3 	bl	8000ce4 <HAL_GetTick>
 800017e:	4603      	mov	r3, r0
 8000180:	9300      	str	r3, [sp, #0]
 8000182:	4b3b      	ldr	r3, [pc, #236]	@ (8000270 <app_init+0x124>)
 8000184:	4a3b      	ldr	r2, [pc, #236]	@ (8000274 <app_init+0x128>)
 8000186:	213f      	movs	r1, #63	@ 0x3f
 8000188:	4620      	mov	r0, r4
 800018a:	f002 f85f 	bl	800224c <sniprintf>
 800018e:	4603      	mov	r3, r0
 8000190:	4a36      	ldr	r2, [pc, #216]	@ (800026c <app_init+0x120>)
 8000192:	6013      	str	r3, [r2, #0]
 8000194:	4b33      	ldr	r3, [pc, #204]	@ (8000264 <app_init+0x118>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f95d 	bl	8000458 <logger_log_print_>
 800019e:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80001a0:	b672      	cpsid	i
 80001a2:	4b30      	ldr	r3, [pc, #192]	@ (8000264 <app_init+0x118>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a34      	ldr	r2, [pc, #208]	@ (8000278 <app_init+0x12c>)
 80001a8:	6812      	ldr	r2, [r2, #0]
 80001aa:	213f      	movs	r1, #63	@ 0x3f
 80001ac:	4618      	mov	r0, r3
 80001ae:	f002 f84d 	bl	800224c <sniprintf>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a2d      	ldr	r2, [pc, #180]	@ (800026c <app_init+0x120>)
 80001b6:	6013      	str	r3, [r2, #0]
 80001b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000264 <app_init+0x118>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 f94b 	bl	8000458 <logger_log_print_>
 80001c2:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80001c4:	b672      	cpsid	i
 80001c6:	4b27      	ldr	r3, [pc, #156]	@ (8000264 <app_init+0x118>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a2c      	ldr	r2, [pc, #176]	@ (800027c <app_init+0x130>)
 80001cc:	6812      	ldr	r2, [r2, #0]
 80001ce:	213f      	movs	r1, #63	@ 0x3f
 80001d0:	4618      	mov	r0, r3
 80001d2:	f002 f83b 	bl	800224c <sniprintf>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a24      	ldr	r2, [pc, #144]	@ (800026c <app_init+0x120>)
 80001da:	6013      	str	r3, [r2, #0]
 80001dc:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <app_init+0x118>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f939 	bl	8000458 <logger_log_print_>
 80001e6:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80001e8:	4b25      	ldr	r3, [pc, #148]	@ (8000280 <app_init+0x134>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 80001ee:	b672      	cpsid	i
 80001f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000264 <app_init+0x118>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	4b22      	ldr	r3, [pc, #136]	@ (8000280 <app_init+0x134>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	4b22      	ldr	r3, [pc, #136]	@ (8000284 <app_init+0x138>)
 80001fc:	4a22      	ldr	r2, [pc, #136]	@ (8000288 <app_init+0x13c>)
 80001fe:	213f      	movs	r1, #63	@ 0x3f
 8000200:	f002 f824 	bl	800224c <sniprintf>
 8000204:	4603      	mov	r3, r0
 8000206:	4a19      	ldr	r2, [pc, #100]	@ (800026c <app_init+0x120>)
 8000208:	6013      	str	r3, [r2, #0]
 800020a:	4b16      	ldr	r3, [pc, #88]	@ (8000264 <app_init+0x118>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f922 	bl	8000458 <logger_log_print_>
 8000214:	b662      	cpsie	i

	for (index = 0; index < (sizeof(task_x_init_list)/sizeof(task_x_t)); index++)
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	e00d      	b.n	8000238 <app_init+0xec>
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_init */
		(*task_x_init_list[index].p_task_x)(task_x_init_list[index].parameters);
 800021c:	4a1b      	ldr	r2, [pc, #108]	@ (800028c <app_init+0x140>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000224:	4919      	ldr	r1, [pc, #100]	@ (800028c <app_init+0x140>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	440b      	add	r3, r1
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4618      	mov	r0, r3
 8000230:	4790      	blx	r2
	for (index = 0; index < (sizeof(task_x_init_list)/sizeof(task_x_t)); index++)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d9ee      	bls.n	800021c <app_init+0xd0>
	}

	cycle_counter_init();
 800023e:	4b14      	ldr	r3, [pc, #80]	@ (8000290 <app_init+0x144>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	4a13      	ldr	r2, [pc, #76]	@ (8000290 <app_init+0x144>)
 8000244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000248:	60d3      	str	r3, [r2, #12]
 800024a:	4b12      	ldr	r3, [pc, #72]	@ (8000294 <app_init+0x148>)
 800024c:	2200      	movs	r2, #0
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <app_init+0x148>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <app_init+0x148>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bd90      	pop	{r4, r7, pc}
 8000264:	0800340c 	.word	0x0800340c
 8000268:	08003208 	.word	0x08003208
 800026c:	20000110 	.word	0x20000110
 8000270:	0800320c 	.word	0x0800320c
 8000274:	08003218 	.word	0x08003218
 8000278:	20000030 	.word	0x20000030
 800027c:	20000034 	.word	0x20000034
 8000280:	200000c8 	.word	0x200000c8
 8000284:	0800323c 	.word	0x0800323c
 8000288:	08003248 	.word	0x08003248
 800028c:	20000000 	.word	0x20000000
 8000290:	e000edf0 	.word	0xe000edf0
 8000294:	e0001000 	.word	0xe0001000

08000298 <app_update>:

void app_update(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b089      	sub	sp, #36	@ 0x24
 800029c:	af04      	add	r7, sp, #16
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Update App Counter */
	g_app_cnt++;
 800029e:	4b55      	ldr	r3, [pc, #340]	@ (80003f4 <app_update+0x15c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3301      	adds	r3, #1
 80002a4:	4a53      	ldr	r2, [pc, #332]	@ (80003f4 <app_update+0x15c>)
 80002a6:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("\r\n");
 80002a8:	b672      	cpsid	i
 80002aa:	4b53      	ldr	r3, [pc, #332]	@ (80003f8 <app_update+0x160>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a53      	ldr	r2, [pc, #332]	@ (80003fc <app_update+0x164>)
 80002b0:	213f      	movs	r1, #63	@ 0x3f
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 ffca 	bl	800224c <sniprintf>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a51      	ldr	r2, [pc, #324]	@ (8000400 <app_update+0x168>)
 80002bc:	6013      	str	r3, [r2, #0]
 80002be:	4b4e      	ldr	r3, [pc, #312]	@ (80003f8 <app_update+0x160>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f8c8 	bl	8000458 <logger_log_print_>
 80002c8:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_update), (int)HAL_GetTick());
 80002ca:	b672      	cpsid	i
 80002cc:	4b4a      	ldr	r3, [pc, #296]	@ (80003f8 <app_update+0x160>)
 80002ce:	681c      	ldr	r4, [r3, #0]
 80002d0:	f000 fd08 	bl	8000ce4 <HAL_GetTick>
 80002d4:	4603      	mov	r3, r0
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000404 <app_update+0x16c>)
 80002da:	4a4b      	ldr	r2, [pc, #300]	@ (8000408 <app_update+0x170>)
 80002dc:	213f      	movs	r1, #63	@ 0x3f
 80002de:	4620      	mov	r0, r4
 80002e0:	f001 ffb4 	bl	800224c <sniprintf>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4a46      	ldr	r2, [pc, #280]	@ (8000400 <app_update+0x168>)
 80002e8:	6013      	str	r3, [r2, #0]
 80002ea:	4b43      	ldr	r3, [pc, #268]	@ (80003f8 <app_update+0x160>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f8b2 	bl	8000458 <logger_log_print_>
 80002f4:	b662      	cpsie	i

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 80002f6:	b672      	cpsid	i
 80002f8:	4b3f      	ldr	r3, [pc, #252]	@ (80003f8 <app_update+0x160>)
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	4b3d      	ldr	r3, [pc, #244]	@ (80003f4 <app_update+0x15c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	4b42      	ldr	r3, [pc, #264]	@ (800040c <app_update+0x174>)
 8000304:	4a42      	ldr	r2, [pc, #264]	@ (8000410 <app_update+0x178>)
 8000306:	213f      	movs	r1, #63	@ 0x3f
 8000308:	f001 ffa0 	bl	800224c <sniprintf>
 800030c:	4603      	mov	r3, r0
 800030e:	4a3c      	ldr	r2, [pc, #240]	@ (8000400 <app_update+0x168>)
 8000310:	6013      	str	r3, [r2, #0]
 8000312:	4b39      	ldr	r3, [pc, #228]	@ (80003f8 <app_update+0x160>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f89e 	bl	8000458 <logger_log_print_>
 800031c:	b662      	cpsie	i

	for (index = 0; index < (sizeof(task_x_update_list)/sizeof(task_x_t)); index++)
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e05f      	b.n	80003e4 <app_update+0x14c>
	{
		/* Print out: Cycle Counter Reset */
		LOGGER_LOG("\r\n");
 8000324:	b672      	cpsid	i
 8000326:	4b34      	ldr	r3, [pc, #208]	@ (80003f8 <app_update+0x160>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a34      	ldr	r2, [pc, #208]	@ (80003fc <app_update+0x164>)
 800032c:	213f      	movs	r1, #63	@ 0x3f
 800032e:	4618      	mov	r0, r3
 8000330:	f001 ff8c 	bl	800224c <sniprintf>
 8000334:	4603      	mov	r3, r0
 8000336:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <app_update+0x168>)
 8000338:	6013      	str	r3, [r2, #0]
 800033a:	4b2f      	ldr	r3, [pc, #188]	@ (80003f8 <app_update+0x160>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f88a 	bl	8000458 <logger_log_print_>
 8000344:	b662      	cpsie	i
		LOGGER_LOG(" %s\r\n", GET_NAME(cycle_counter_reset));
 8000346:	b672      	cpsid	i
 8000348:	4b2b      	ldr	r3, [pc, #172]	@ (80003f8 <app_update+0x160>)
 800034a:	6818      	ldr	r0, [r3, #0]
 800034c:	4b31      	ldr	r3, [pc, #196]	@ (8000414 <app_update+0x17c>)
 800034e:	4a32      	ldr	r2, [pc, #200]	@ (8000418 <app_update+0x180>)
 8000350:	213f      	movs	r1, #63	@ 0x3f
 8000352:	f001 ff7b 	bl	800224c <sniprintf>
 8000356:	4603      	mov	r3, r0
 8000358:	4a29      	ldr	r2, [pc, #164]	@ (8000400 <app_update+0x168>)
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	4b26      	ldr	r3, [pc, #152]	@ (80003f8 <app_update+0x160>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f879 	bl	8000458 <logger_log_print_>
 8000366:	b662      	cpsie	i

		HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 8000368:	2120      	movs	r1, #32
 800036a:	482c      	ldr	r0, [pc, #176]	@ (800041c <app_update+0x184>)
 800036c:	f000 ff74 	bl	8001258 <HAL_GPIO_TogglePin>
		cycle_counter_reset();
 8000370:	4b2b      	ldr	r3, [pc, #172]	@ (8000420 <app_update+0x188>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_update */
		(*task_x_update_list[index].p_task_x)(task_x_update_list[index].parameters);
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <app_update+0x18c>)
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800037e:	4929      	ldr	r1, [pc, #164]	@ (8000424 <app_update+0x18c>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	440b      	add	r3, r1
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4618      	mov	r0, r3
 800038a:	4790      	blx	r2

		cycle_counter = cycle_counter_get();
 800038c:	4b24      	ldr	r3, [pc, #144]	@ (8000420 <app_update+0x188>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	60bb      	str	r3, [r7, #8]
		cycle_counter_time_us = cycle_counter_time_us();
 8000392:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <app_update+0x188>)
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <app_update+0x190>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4924      	ldr	r1, [pc, #144]	@ (800042c <app_update+0x194>)
 800039c:	fba1 1303 	umull	r1, r3, r1, r3
 80003a0:	0c9b      	lsrs	r3, r3, #18
 80003a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a6:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 80003a8:	2120      	movs	r1, #32
 80003aa:	481c      	ldr	r0, [pc, #112]	@ (800041c <app_update+0x184>)
 80003ac:	f000 ff54 	bl	8001258 <HAL_GPIO_TogglePin>

		/* Print out: Cycle Counter */
		LOGGER_LOG(" %s: %lu - %s: %lu uS\r\n", GET_NAME(cycle_counter), cycle_counter, GET_NAME(cycle_counter_time_us), cycle_counter_time_us);
 80003b0:	b672      	cpsid	i
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <app_update+0x160>)
 80003b4:	6818      	ldr	r0, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	9302      	str	r3, [sp, #8]
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <app_update+0x198>)
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000434 <app_update+0x19c>)
 80003c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000438 <app_update+0x1a0>)
 80003c6:	213f      	movs	r1, #63	@ 0x3f
 80003c8:	f001 ff40 	bl	800224c <sniprintf>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <app_update+0x168>)
 80003d0:	6013      	str	r3, [r2, #0]
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <app_update+0x160>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f83e 	bl	8000458 <logger_log_print_>
 80003dc:	b662      	cpsie	i
	for (index = 0; index < (sizeof(task_x_update_list)/sizeof(task_x_t)); index++)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3301      	adds	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d99c      	bls.n	8000324 <app_update+0x8c>
	}
}
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd90      	pop	{r4, r7, pc}
 80003f4:	200000c8 	.word	0x200000c8
 80003f8:	0800340c 	.word	0x0800340c
 80003fc:	08003208 	.word	0x08003208
 8000400:	20000110 	.word	0x20000110
 8000404:	08003254 	.word	0x08003254
 8000408:	08003218 	.word	0x08003218
 800040c:	0800323c 	.word	0x0800323c
 8000410:	08003248 	.word	0x08003248
 8000414:	08003260 	.word	0x08003260
 8000418:	08003274 	.word	0x08003274
 800041c:	40010800 	.word	0x40010800
 8000420:	e0001000 	.word	0xe0001000
 8000424:	20000018 	.word	0x20000018
 8000428:	20000038 	.word	0x20000038
 800042c:	431bde83 	.word	0x431bde83
 8000430:	080032a4 	.word	0x080032a4
 8000434:	0800327c 	.word	0x0800327c
 8000438:	0800328c 	.word	0x0800328c

0800043c <HAL_SYSTICK_Callback>:
 * function as an argument to call it, then it will be called a Callback
 * function.
 */

void HAL_SYSTICK_Callback(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	g_tick_cnt++;
 8000440:	4b04      	ldr	r3, [pc, #16]	@ (8000454 <HAL_SYSTICK_Callback+0x18>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4a03      	ldr	r2, [pc, #12]	@ (8000454 <HAL_SYSTICK_Callback+0x18>)
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	200000cc 	.word	0x200000cc

08000458 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	printf(msg);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f001 fee1 	bl	8002228 <iprintf>
	fflush(stdout);
 8000466:	4b05      	ldr	r3, [pc, #20]	@ (800047c <logger_log_print_+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fe05 	bl	800207c <fflush>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000005c 	.word	0x2000005c

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fbd6 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 f809 	bl	800049e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 f872 	bl	8000574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000490:	f000 f846 	bl	8000520 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Application Init */

  app_init();
 8000494:	f7ff fe5a 	bl	800014c <app_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  app_update();
 8000498:	f7ff fefe 	bl	8000298 <app_update>
 800049c:	e7fc      	b.n	8000498 <main+0x18>

0800049e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b090      	sub	sp, #64	@ 0x40
 80004a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	2228      	movs	r2, #40	@ 0x28
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 ff44 	bl	800233a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c0:	2302      	movs	r3, #2
 80004c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	2301      	movs	r3, #1
 80004c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c8:	2310      	movs	r3, #16
 80004ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004cc:	2302      	movs	r3, #2
 80004ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004d0:	2300      	movs	r3, #0
 80004d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004d4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80004d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fef6 	bl	80012d0 <HAL_RCC_OscConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004ea:	f000 f8b1 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	230f      	movs	r3, #15
 80004f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f2:	2302      	movs	r3, #2
 80004f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2102      	movs	r1, #2
 8000508:	4618      	mov	r0, r3
 800050a:	f001 f963 	bl	80017d4 <HAL_RCC_ClockConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000514:	f000 f89c 	bl	8000650 <Error_Handler>
  }
}
 8000518:	bf00      	nop
 800051a:	3740      	adds	r7, #64	@ 0x40
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <MX_USART2_UART_Init+0x50>)
 8000528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 800052c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_USART2_UART_Init+0x4c>)
 8000558:	f001 faca 	bl	8001af0 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000562:	f000 f875 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000114 	.word	0x20000114
 8000570:	40004400 	.word	0x40004400

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_GPIO_Init+0xcc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a2c      	ldr	r2, [pc, #176]	@ (8000640 <MX_GPIO_Init+0xcc>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_GPIO_Init+0xcc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a26      	ldr	r2, [pc, #152]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xcc>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2120      	movs	r1, #32
 80005ec:	4815      	ldr	r0, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xd0>)
 80005ee:	f000 fe1b 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <MX_GPIO_Init+0xd4>)
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4811      	ldr	r0, [pc, #68]	@ (800064c <MX_GPIO_Init+0xd8>)
 8000608:	f000 fc8a 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060c:	2320      	movs	r3, #32
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4808      	ldr	r0, [pc, #32]	@ (8000644 <MX_GPIO_Init+0xd0>)
 8000624:	f000 fc7c 	bl	8000f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2028      	movs	r0, #40	@ 0x28
 800062e:	f000 fc3a 	bl	8000ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000632:	2028      	movs	r0, #40	@ 0x28
 8000634:	f000 fc53 	bl	8000ede <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800
 8000648:	10110000 	.word	0x10110000
 800064c:	40011000 	.word	0x40011000

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <Error_Handler+0x8>

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_MspInit+0x60>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_MspInit+0x60>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <HAL_UART_MspInit+0x70>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d123      	bne.n	8000728 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <HAL_UART_MspInit+0x74>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <HAL_UART_MspInit+0x74>)
 80006e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <HAL_UART_MspInit+0x74>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <HAL_UART_MspInit+0x74>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <HAL_UART_MspInit+0x74>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_UART_MspInit+0x74>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000710:	230c      	movs	r3, #12
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <HAL_UART_MspInit+0x78>)
 8000724:	f000 fbfc 	bl	8000f20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40004400 	.word	0x40004400
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <NMI_Handler+0x4>

08000744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <UsageFault_Handler+0x4>

08000764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 fa98 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8000790:	f000 fbbf 	bl	8000f12 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800079c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007a0:	f000 fd74 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	@ (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	@ (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d207      	bcs.n	80007e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d8:	f001 fdfe 	bl	80023d8 <__errno>
 80007dc:	4603      	mov	r3, r0
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e009      	b.n	80007fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <_sbrk+0x64>)
 80007f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20005000 	.word	0x20005000
 8000808:	00000400 	.word	0x00000400
 800080c:	2000015c 	.word	0x2000015c
 8000810:	20000360 	.word	0x20000360

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <task_a_init>:
/********************** external data declaration *****************************/
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
void task_a_init(void *parameters)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af02      	add	r7, sp, #8
 8000826:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_init), p_task_a);
 8000828:	b672      	cpsid	i
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <task_a_init+0x68>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <task_a_init+0x6c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <task_a_init+0x70>)
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <task_a_init+0x74>)
 8000838:	213f      	movs	r1, #63	@ 0x3f
 800083a:	f001 fd07 	bl	800224c <sniprintf>
 800083e:	4603      	mov	r3, r0
 8000840:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <task_a_init+0x78>)
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <task_a_init+0x68>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fe05 	bl	8000458 <logger_log_print_>
 800084e:	b662      	cpsie	i

	g_task_a_cnt = G_TASK_A_CNT_INI;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <task_a_init+0x7c>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 8000856:	b672      	cpsid	i
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <task_a_init+0x68>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <task_a_init+0x7c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <task_a_init+0x80>)
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <task_a_init+0x84>)
 8000866:	213f      	movs	r1, #63	@ 0x3f
 8000868:	f001 fcf0 	bl	800224c <sniprintf>
 800086c:	4603      	mov	r3, r0
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <task_a_init+0x78>)
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <task_a_init+0x68>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fdee 	bl	8000458 <logger_log_print_>
 800087c:	b662      	cpsie	i
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800340c 	.word	0x0800340c
 800088c:	2000003c 	.word	0x2000003c
 8000890:	080032d4 	.word	0x080032d4
 8000894:	080032e0 	.word	0x080032e0
 8000898:	20000110 	.word	0x20000110
 800089c:	20000160 	.word	0x20000160
 80008a0:	080032f8 	.word	0x080032f8
 80008a4:	08003308 	.word	0x08003308

080008a8 <task_a_update>:

void task_a_update(void *parameters)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	6078      	str	r0, [r7, #4]
	 * store data in a defined scope where they can be accessed and
	 * manipulated.
	 */
	#if (TEST_X == TEST_0)

	uint32_t task_a_cnt = TASK_A_CNT_INI;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
	/* Here Chatbot Artificial Intelligence generated code */

	#endif

	/* Update Task A Counter */
	g_task_a_cnt++;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <task_a_update+0x84>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a1c      	ldr	r2, [pc, #112]	@ (800092c <task_a_update+0x84>)
 80008bc:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_update), p_task_a);
 80008be:	b672      	cpsid	i
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <task_a_update+0x88>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <task_a_update+0x8c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <task_a_update+0x90>)
 80008cc:	4a1b      	ldr	r2, [pc, #108]	@ (800093c <task_a_update+0x94>)
 80008ce:	213f      	movs	r1, #63	@ 0x3f
 80008d0:	f001 fcbc 	bl	800224c <sniprintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000940 <task_a_update+0x98>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <task_a_update+0x88>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fdba 	bl	8000458 <logger_log_print_>
 80008e4:	b662      	cpsie	i

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 80008e6:	b672      	cpsid	i
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <task_a_update+0x88>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <task_a_update+0x84>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <task_a_update+0x9c>)
 80008f4:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <task_a_update+0xa0>)
 80008f6:	213f      	movs	r1, #63	@ 0x3f
 80008f8:	f001 fca8 	bl	800224c <sniprintf>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <task_a_update+0x98>)
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <task_a_update+0x88>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fda6 	bl	8000458 <logger_log_print_>
 800090c:	b662      	cpsie	i
	 * The program waits until the called function or the operation
	 * returns.
	 * */
	#if (TEST_X == TEST_0)

	for (task_a_cnt = TASK_A_CNT_INI; task_a_cnt < TASK_A_CNT_MAX; task_a_cnt++);
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e002      	b.n	800091a <task_a_update+0x72>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4a0b      	ldr	r2, [pc, #44]	@ (800094c <task_a_update+0xa4>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d9f8      	bls.n	8000914 <task_a_update+0x6c>
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000160 	.word	0x20000160
 8000930:	0800340c 	.word	0x0800340c
 8000934:	2000003c 	.word	0x2000003c
 8000938:	08003318 	.word	0x08003318
 800093c:	080032e0 	.word	0x080032e0
 8000940:	20000110 	.word	0x20000110
 8000944:	080032f8 	.word	0x080032f8
 8000948:	08003308 	.word	0x08003308
 800094c:	0001869f 	.word	0x0001869f

08000950 <task_b_init>:
/********************** external data declaration *****************************/
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
void task_b_init(void *parameters)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af02      	add	r7, sp, #8
 8000956:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_init), p_task_b);
 8000958:	b672      	cpsid	i
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <task_b_init+0x68>)
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <task_b_init+0x6c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <task_b_init+0x70>)
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <task_b_init+0x74>)
 8000968:	213f      	movs	r1, #63	@ 0x3f
 800096a:	f001 fc6f 	bl	800224c <sniprintf>
 800096e:	4603      	mov	r3, r0
 8000970:	4a15      	ldr	r2, [pc, #84]	@ (80009c8 <task_b_init+0x78>)
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <task_b_init+0x68>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fd6d 	bl	8000458 <logger_log_print_>
 800097e:	b662      	cpsie	i

	g_task_b_cnt = G_TASK_B_CNT_INI;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <task_b_init+0x7c>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8000986:	b672      	cpsid	i
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <task_b_init+0x68>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <task_b_init+0x7c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <task_b_init+0x80>)
 8000994:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <task_b_init+0x84>)
 8000996:	213f      	movs	r1, #63	@ 0x3f
 8000998:	f001 fc58 	bl	800224c <sniprintf>
 800099c:	4603      	mov	r3, r0
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <task_b_init+0x78>)
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <task_b_init+0x68>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd56 	bl	8000458 <logger_log_print_>
 80009ac:	b662      	cpsie	i
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	0800340c 	.word	0x0800340c
 80009bc:	20000040 	.word	0x20000040
 80009c0:	08003344 	.word	0x08003344
 80009c4:	08003350 	.word	0x08003350
 80009c8:	20000110 	.word	0x20000110
 80009cc:	20000164 	.word	0x20000164
 80009d0:	08003368 	.word	0x08003368
 80009d4:	08003378 	.word	0x08003378

080009d8 <task_b_update>:

void task_b_update(void *parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]
	/* Here Chatbot Artificial Intelligence generated code */

	#endif

	/* Update Task B Counter */
	g_task_b_cnt++;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <task_b_update+0x84>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <task_b_update+0x84>)
 80009e8:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_update), p_task_b);
 80009ea:	b672      	cpsid	i
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <task_b_update+0x88>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <task_b_update+0x8c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <task_b_update+0x90>)
 80009f8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <task_b_update+0x94>)
 80009fa:	213f      	movs	r1, #63	@ 0x3f
 80009fc:	f001 fc26 	bl	800224c <sniprintf>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <task_b_update+0x98>)
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <task_b_update+0x88>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fd24 	bl	8000458 <logger_log_print_>
 8000a10:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8000a12:	b672      	cpsid	i
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <task_b_update+0x88>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <task_b_update+0x84>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <task_b_update+0x9c>)
 8000a20:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <task_b_update+0xa0>)
 8000a22:	213f      	movs	r1, #63	@ 0x3f
 8000a24:	f001 fc12 	bl	800224c <sniprintf>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <task_b_update+0x98>)
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <task_b_update+0x88>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fd10 	bl	8000458 <logger_log_print_>
 8000a38:	b662      	cpsie	i
	 * The program calls the function and move to the next operation and does
	 * not wait for it to return.
	 */
	#if (TEST_X == TEST_0)

	if (task_b_cnt < TASK_B_CNT_MAX)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <task_b_update+0xa4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b31      	cmp	r3, #49	@ 0x31
 8000a40:	d805      	bhi.n	8000a4e <task_b_update+0x76>
		task_b_cnt++;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <task_b_update+0xa4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <task_b_update+0xa4>)
 8000a4a:	6013      	str	r3, [r2, #0]
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 8000a4c:	e002      	b.n	8000a54 <task_b_update+0x7c>
		task_b_cnt = TASK_B_CNT_INI;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <task_b_update+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000164 	.word	0x20000164
 8000a60:	0800340c 	.word	0x0800340c
 8000a64:	20000040 	.word	0x20000040
 8000a68:	08003388 	.word	0x08003388
 8000a6c:	08003350 	.word	0x08003350
 8000a70:	20000110 	.word	0x20000110
 8000a74:	08003368 	.word	0x08003368
 8000a78:	08003378 	.word	0x08003378
 8000a7c:	20000168 	.word	0x20000168

08000a80 <task_c_init>:
/********************** external data declaration *****************************/
uint32_t g_task_c_cnt;

/********************** external functions definition ************************/
void task_c_init(void *parameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_init), p_task_c);
 8000a88:	b672      	cpsid	i
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <task_c_init+0x6c>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <task_c_init+0x70>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <task_c_init+0x74>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <task_c_init+0x78>)
 8000a98:	213f      	movs	r1, #63	@ 0x3f
 8000a9a:	f001 fbd7 	bl	800224c <sniprintf>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <task_c_init+0x7c>)
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <task_c_init+0x6c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fcd5 	bl	8000458 <logger_log_print_>
 8000aae:	b662      	cpsie	i

	g_task_c_cnt = G_TASK_C_CNT_INI;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <task_c_init+0x80>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	g_tick_cnt = G_TICK_CNT_INI;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <task_c_init+0x84>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_c_cnt), (int)g_task_c_cnt);
 8000abc:	b672      	cpsid	i
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <task_c_init+0x6c>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <task_c_init+0x80>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <task_c_init+0x88>)
 8000aca:	4a10      	ldr	r2, [pc, #64]	@ (8000b0c <task_c_init+0x8c>)
 8000acc:	213f      	movs	r1, #63	@ 0x3f
 8000ace:	f001 fbbd 	bl	800224c <sniprintf>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <task_c_init+0x7c>)
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <task_c_init+0x6c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcbb 	bl	8000458 <logger_log_print_>
 8000ae2:	b662      	cpsie	i
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	0800340c 	.word	0x0800340c
 8000af0:	20000044 	.word	0x20000044
 8000af4:	080033b8 	.word	0x080033b8
 8000af8:	080033c4 	.word	0x080033c4
 8000afc:	20000110 	.word	0x20000110
 8000b00:	2000016c 	.word	0x2000016c
 8000b04:	200000cc 	.word	0x200000cc
 8000b08:	080033dc 	.word	0x080033dc
 8000b0c:	080033ec 	.word	0x080033ec

08000b10 <task_c_update>:

void task_c_update(void *parameters)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]

	/* Update Task C Counter */
	g_task_c_cnt++;
 8000b1c:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <task_c_update+0xb4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a28      	ldr	r2, [pc, #160]	@ (8000bc4 <task_c_update+0xb4>)
 8000b24:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_update), p_task_c);
 8000b26:	b672      	cpsid	i
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <task_c_update+0xb8>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <task_c_update+0xbc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	4b27      	ldr	r3, [pc, #156]	@ (8000bd0 <task_c_update+0xc0>)
 8000b34:	4a27      	ldr	r2, [pc, #156]	@ (8000bd4 <task_c_update+0xc4>)
 8000b36:	213f      	movs	r1, #63	@ 0x3f
 8000b38:	f001 fb88 	bl	800224c <sniprintf>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <task_c_update+0xc8>)
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <task_c_update+0xb8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fc86 	bl	8000458 <logger_log_print_>
 8000b4c:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_c_cnt), (int)g_task_c_cnt);
 8000b4e:	b672      	cpsid	i
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <task_c_update+0xb8>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <task_c_update+0xb4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <task_c_update+0xcc>)
 8000b5c:	4a20      	ldr	r2, [pc, #128]	@ (8000be0 <task_c_update+0xd0>)
 8000b5e:	213f      	movs	r1, #63	@ 0x3f
 8000b60:	f001 fb74 	bl	800224c <sniprintf>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <task_c_update+0xc8>)
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <task_c_update+0xb8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc72 	bl	8000458 <logger_log_print_>
 8000b74:	b662      	cpsie	i

	/* Protect shared resource (g_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8000b76:	b672      	cpsid	i
    if (0 < g_tick_cnt)
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <task_c_update+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <task_c_update+0x7e>
    {
    	g_tick_cnt--;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <task_c_update+0xd4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <task_c_update+0xd4>)
 8000b88:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8000b8e:	b662      	cpsie	i

    while (b_time_update_required)
 8000b90:	e00f      	b.n	8000bb2 <task_c_update+0xa2>
    	 * For example, update Software Timers
    	 *
    	 */

		/* Protect shared resource (tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8000b92:	b672      	cpsid	i
		if (0 < g_tick_cnt)
 8000b94:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <task_c_update+0xd4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <task_c_update+0x9c>
		{
			g_tick_cnt--;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <task_c_update+0xd4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <task_c_update+0xd4>)
 8000ba4:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e001      	b.n	8000bb0 <task_c_update+0xa0>
		}
		else
		{
			b_time_update_required = false;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8000bb0:	b662      	cpsie	i
    while (b_time_update_required)
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1ec      	bne.n	8000b92 <task_c_update+0x82>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000016c 	.word	0x2000016c
 8000bc8:	0800340c 	.word	0x0800340c
 8000bcc:	20000044 	.word	0x20000044
 8000bd0:	080033fc 	.word	0x080033fc
 8000bd4:	080033c4 	.word	0x080033c4
 8000bd8:	20000110 	.word	0x20000110
 8000bdc:	080033dc 	.word	0x080033dc
 8000be0:	080033ec 	.word	0x080033ec
 8000be4:	200000cc 	.word	0x200000cc

08000be8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be8:	f7ff fe14 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bee:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c04:	4c09      	ldr	r4, [pc, #36]	@ (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c12:	f001 fbe7 	bl	80023e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff fc33 	bl	8000480 <main>
  bx lr
 8000c1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000c24:	08003478 	.word	0x08003478
  ldr r2, =_sbss
 8000c28:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000c2c:	20000360 	.word	0x20000360

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x28>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x28>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f923 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fd04 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f93b 	bl	8000efa <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f903 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000038 	.word	0x20000038
 8000cb8:	2000004c 	.word	0x2000004c
 8000cbc:	20000048 	.word	0x20000048

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a03      	ldr	r2, [pc, #12]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	2000004c 	.word	0x2000004c
 8000ce0:	20000170 	.word	0x20000170

08000ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	@ (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	20000170 	.word	0x20000170

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4906      	ldr	r1, [pc, #24]	@ (8000d90 <__NVIC_EnableIRQ+0x34>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	@ (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	@ (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	@ 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff90 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff2d 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff42 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff90 	bl	8000de8 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5f 	bl	8000d94 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff35 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa2 	bl	8000e4c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f16:	f7ff fa91 	bl	800043c <HAL_SYSTICK_Callback>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	@ 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e169      	b.n	8001208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8158 	bne.w	8001202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a9a      	ldr	r2, [pc, #616]	@ (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d05e      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f5c:	4a98      	ldr	r2, [pc, #608]	@ (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d875      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f62:	4a98      	ldr	r2, [pc, #608]	@ (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d058      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f68:	4a96      	ldr	r2, [pc, #600]	@ (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d86f      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f6e:	4a96      	ldr	r2, [pc, #600]	@ (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d052      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f74:	4a94      	ldr	r2, [pc, #592]	@ (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d869      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f7a:	4a94      	ldr	r2, [pc, #592]	@ (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d04c      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f80:	4a92      	ldr	r2, [pc, #584]	@ (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d863      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f86:	4a92      	ldr	r2, [pc, #584]	@ (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d046      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f8c:	4a90      	ldr	r2, [pc, #576]	@ (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d85d      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d82a      	bhi.n	8000fec <HAL_GPIO_Init+0xcc>
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d859      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa0 <HAL_GPIO_Init+0x80>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08001007 	.word	0x08001007
 8000fac:	08001049 	.word	0x08001049
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	4a79      	ldr	r2, [pc, #484]	@ (80011d4 <HAL_GPIO_Init+0x2b4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff2:	e02c      	b.n	800104e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e029      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e024      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	3308      	adds	r3, #8
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e01f      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	330c      	adds	r3, #12
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e01a      	b.n	8001050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001022:	2304      	movs	r3, #4
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e013      	b.n	8001050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	611a      	str	r2, [r3, #16]
          break;
 800103a:	e009      	b.n	8001050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	615a      	str	r2, [r3, #20]
          break;
 8001046:	e003      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x130>
          break;
 800104e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d801      	bhi.n	800105a <HAL_GPIO_Init+0x13a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	e001      	b.n	800105e <HAL_GPIO_Init+0x13e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	@ 0xff
 8001064:	d802      	bhi.n	800106c <HAL_GPIO_Init+0x14c>
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x152>
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	3b08      	subs	r3, #8
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	210f      	movs	r1, #15
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	6a39      	ldr	r1, [r7, #32]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80b1 	beq.w	8001202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a0:	4b4d      	ldr	r3, [pc, #308]	@ (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	@ (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	@ (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b8:	4a48      	ldr	r2, [pc, #288]	@ (80011dc <HAL_GPIO_Init+0x2bc>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a40      	ldr	r2, [pc, #256]	@ (80011e0 <HAL_GPIO_Init+0x2c0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <HAL_GPIO_Init+0x1ec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3f      	ldr	r2, [pc, #252]	@ (80011e4 <HAL_GPIO_Init+0x2c4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1e8>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3e      	ldr	r2, [pc, #248]	@ (80011e8 <HAL_GPIO_Init+0x2c8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1e4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3d      	ldr	r2, [pc, #244]	@ (80011ec <HAL_GPIO_Init+0x2cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1e0>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001100:	2304      	movs	r3, #4
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001104:	2302      	movs	r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 800110c:	2300      	movs	r3, #0
 800110e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111e:	492f      	ldr	r1, [pc, #188]	@ (80011dc <HAL_GPIO_Init+0x2bc>)
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	492c      	ldr	r1, [pc, #176]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4928      	ldr	r1, [pc, #160]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001150:	4013      	ands	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	4922      	ldr	r1, [pc, #136]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	491e      	ldr	r1, [pc, #120]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4918      	ldr	r1, [pc, #96]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4914      	ldr	r1, [pc, #80]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d021      	beq.n	80011f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	490e      	ldr	r1, [pc, #56]	@ (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x2e2>
 80011be:	bf00      	nop
 80011c0:	10320000 	.word	0x10320000
 80011c4:	10310000 	.word	0x10310000
 80011c8:	10220000 	.word	0x10220000
 80011cc:	10210000 	.word	0x10210000
 80011d0:	10120000 	.word	0x10120000
 80011d4:	10110000 	.word	0x10110000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010800 	.word	0x40010800
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40011000 	.word	0x40011000
 80011ec:	40011400 	.word	0x40011400
 80011f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_GPIO_Init+0x304>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4909      	ldr	r1, [pc, #36]	@ (8001224 <HAL_GPIO_Init+0x304>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	fa22 f303 	lsr.w	r3, r2, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	f47f ae8e 	bne.w	8000f34 <HAL_GPIO_Init+0x14>
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	372c      	adds	r7, #44	@ 0x2c
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43d9      	mvns	r1, r3
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	400b      	ands	r3, r1
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
	...

0800128c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f806 	bl	80012bc <HAL_GPIO_EXTI_Callback>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e272      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b92      	ldr	r3, [pc, #584]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4b8f      	ldr	r3, [pc, #572]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
 8001308:	4b8c      	ldr	r3, [pc, #560]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b89      	ldr	r3, [pc, #548]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x12c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e24c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x76>
 8001338:	4b80      	ldr	r3, [pc, #512]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7f      	ldr	r2, [pc, #508]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b7b      	ldr	r3, [pc, #492]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7a      	ldr	r2, [pc, #488]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b78      	ldr	r3, [pc, #480]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a77      	ldr	r2, [pc, #476]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0xbc>
 8001372:	4b72      	ldr	r3, [pc, #456]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a71      	ldr	r2, [pc, #452]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 800138c:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b68      	ldr	r3, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a67      	ldr	r2, [pc, #412]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc9a 	bl	8000ce4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc96 	bl	8000ce4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e200      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe4>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc86 	bl	8000ce4 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc82 	bl	8000ce4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1ec      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b53      	ldr	r3, [pc, #332]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x10c>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	4b4c      	ldr	r3, [pc, #304]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001416:	4b49      	ldr	r3, [pc, #292]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
 8001422:	4b46      	ldr	r3, [pc, #280]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b43      	ldr	r3, [pc, #268]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c0      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4939      	ldr	r1, [pc, #228]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <HAL_RCC_OscConfig+0x270>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fc3b 	bl	8000ce4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fc37 	bl	8000ce4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4927      	ldr	r1, [pc, #156]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_RCC_OscConfig+0x270>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc1a 	bl	8000ce4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc16 	bl	8000ce4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e180      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d03a      	beq.n	8001554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbfa 	bl	8000ce4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbf6 	bl	8000ce4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e160      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_RCC_OscConfig+0x26c>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 face 	bl	8001ab4 <RCC_Delay>
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_RCC_OscConfig+0x274>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fbe0 	bl	8000ce4 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fbdc 	bl	8000ce4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d908      	bls.n	8001548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e146      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	42420000 	.word	0x42420000
 8001544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b92      	ldr	r3, [pc, #584]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e9      	bne.n	8001528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a6 	beq.w	80016ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b8b      	ldr	r3, [pc, #556]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a87      	ldr	r2, [pc, #540]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b85      	ldr	r3, [pc, #532]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb9d 	bl	8000ce4 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fb99 	bl	8000ce4 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	@ 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e103      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x312>
 80015d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e02d      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x334>
 80015ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a69      	ldr	r2, [pc, #420]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b67      	ldr	r3, [pc, #412]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a66      	ldr	r2, [pc, #408]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e01c      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x356>
 800160c:	4b61      	ldr	r3, [pc, #388]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a60      	ldr	r2, [pc, #384]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	4b5e      	ldr	r3, [pc, #376]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a5d      	ldr	r2, [pc, #372]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001626:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a57      	ldr	r2, [pc, #348]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb4d 	bl	8000ce4 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fb49 	bl	8000ce4 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0b1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCC_OscConfig+0x37e>
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fb37 	bl	8000ce4 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fb33 	bl	8000ce4 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e09b      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	4b40      	ldr	r3, [pc, #256]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b8:	4b36      	ldr	r3, [pc, #216]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d061      	beq.n	8001788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d146      	bne.n	800175a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb07 	bl	8000ce4 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb03 	bl	8000ce4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e06d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001702:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4921      	ldr	r1, [pc, #132]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a19      	ldr	r1, [r3, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	430b      	orrs	r3, r1
 8001726:	491b      	ldr	r1, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_RCC_OscConfig+0x4cc>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fad7 	bl	8000ce4 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fad3 	bl	8000ce4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x46a>
 8001758:	e035      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_RCC_OscConfig+0x4cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fac0 	bl	8000ce4 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fabc 	bl	8000ce4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e026      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x498>
 8001786:	e01e      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e019      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x500>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d0      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b67      	ldr	r3, [pc, #412]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4965      	ldr	r1, [pc, #404]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800183a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e073      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4936      	ldr	r1, [pc, #216]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff fa0e 	bl	8000ce4 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff fa0a 	bl	8000ce4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e053      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d210      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4922      	ldr	r1, [pc, #136]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	@ (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f96c 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	08003410 	.word	0x08003410
 80019a0:	20000038 	.word	0x20000038
 80019a4:	20000048 	.word	0x20000048

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x30>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x36>
 80019d6:	e027      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	613b      	str	r3, [r7, #16]
      break;
 80019dc:	e027      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	0c5b      	lsrs	r3, r3, #17
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e004      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	613b      	str	r3, [r7, #16]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2a:	613b      	str	r3, [r7, #16]
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	693b      	ldr	r3, [r7, #16]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	08003428 	.word	0x08003428
 8001a48:	08003438 	.word	0x08003438
 8001a4c:	003d0900 	.word	0x003d0900

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b02      	ldr	r3, [pc, #8]	@ (8001a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000038 	.word	0x20000038

08001a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a68:	f7ff fff2 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	@ (8001a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08003420 	.word	0x08003420

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0adb      	lsrs	r3, r3, #11
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	@ (8001ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08003420 	.word	0x08003420

08001ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <RCC_Delay+0x34>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <RCC_Delay+0x38>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad0:	bf00      	nop
  }
  while (Delay --);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <RCC_Delay+0x1c>
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000038 	.word	0x20000038
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e042      	b.n	8001b88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fdd2 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	@ 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f82b 	bl	8001b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001bca:	f023 030c 	bic.w	r3, r3, #12
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca4 <UART_SetConfig+0x114>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d103      	bne.n	8001c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bf8:	f7ff ff48 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	e002      	b.n	8001c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c00:	f7ff ff30 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 8001c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	441a      	add	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	0119      	lsls	r1, r3, #4
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2064      	movs	r0, #100	@ 0x64
 8001c46:	fb00 f303 	mul.w	r3, r0, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	3332      	adds	r3, #50	@ 0x32
 8001c50:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c5c:	4419      	add	r1, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009a      	lsls	r2, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c76:	fba3 0302 	umull	r0, r3, r3, r2
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	fb00 f303 	mul.w	r3, r0, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	@ 0x32
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	440a      	add	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	51eb851f 	.word	0x51eb851f

08001cac <findslot>:
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <findslot+0x2c>)
 8001cae:	b510      	push	{r4, lr}
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	b118      	cbz	r0, 8001cbe <findslot+0x12>
 8001cb6:	6a03      	ldr	r3, [r0, #32]
 8001cb8:	b90b      	cbnz	r3, 8001cbe <findslot+0x12>
 8001cba:	f000 fa7f 	bl	80021bc <__sinit>
 8001cbe:	2c13      	cmp	r4, #19
 8001cc0:	d807      	bhi.n	8001cd2 <findslot+0x26>
 8001cc2:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <findslot+0x30>)
 8001cc4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001cc8:	3201      	adds	r2, #1
 8001cca:	d002      	beq.n	8001cd2 <findslot+0x26>
 8001ccc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001cd0:	bd10      	pop	{r4, pc}
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e7fc      	b.n	8001cd0 <findslot+0x24>
 8001cd6:	bf00      	nop
 8001cd8:	2000005c 	.word	0x2000005c
 8001cdc:	20000174 	.word	0x20000174

08001ce0 <error>:
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	f000 fb78 	bl	80023d8 <__errno>
 8001ce8:	2613      	movs	r6, #19
 8001cea:	4605      	mov	r5, r0
 8001cec:	2700      	movs	r7, #0
 8001cee:	4630      	mov	r0, r6
 8001cf0:	4639      	mov	r1, r7
 8001cf2:	beab      	bkpt	0x00ab
 8001cf4:	4606      	mov	r6, r0
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	602e      	str	r6, [r5, #0]
 8001cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cfc <checkerror>:
 8001cfc:	1c43      	adds	r3, r0, #1
 8001cfe:	d101      	bne.n	8001d04 <checkerror+0x8>
 8001d00:	f7ff bfee 	b.w	8001ce0 <error>
 8001d04:	4770      	bx	lr

08001d06 <_swiread>:
 8001d06:	b530      	push	{r4, r5, lr}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	2406      	movs	r4, #6
 8001d0c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d10:	9203      	str	r2, [sp, #12]
 8001d12:	ad01      	add	r5, sp, #4
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	beab      	bkpt	0x00ab
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff ffed 	bl	8001cfc <checkerror>
 8001d22:	b005      	add	sp, #20
 8001d24:	bd30      	pop	{r4, r5, pc}

08001d26 <_read>:
 8001d26:	b570      	push	{r4, r5, r6, lr}
 8001d28:	460e      	mov	r6, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	f7ff ffbe 	bl	8001cac <findslot>
 8001d30:	4605      	mov	r5, r0
 8001d32:	b930      	cbnz	r0, 8001d42 <_read+0x1c>
 8001d34:	f000 fb50 	bl	80023d8 <__errno>
 8001d38:	2309      	movs	r3, #9
 8001d3a:	6003      	str	r3, [r0, #0]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
 8001d42:	4622      	mov	r2, r4
 8001d44:	4631      	mov	r1, r6
 8001d46:	6800      	ldr	r0, [r0, #0]
 8001d48:	f7ff ffdd 	bl	8001d06 <_swiread>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d0f5      	beq.n	8001d3c <_read+0x16>
 8001d50:	686b      	ldr	r3, [r5, #4]
 8001d52:	1a20      	subs	r0, r4, r0
 8001d54:	4403      	add	r3, r0
 8001d56:	606b      	str	r3, [r5, #4]
 8001d58:	e7f2      	b.n	8001d40 <_read+0x1a>

08001d5a <_swilseek>:
 8001d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	4616      	mov	r6, r2
 8001d60:	f7ff ffa4 	bl	8001cac <findslot>
 8001d64:	4605      	mov	r5, r0
 8001d66:	b940      	cbnz	r0, 8001d7a <_swilseek+0x20>
 8001d68:	f000 fb36 	bl	80023d8 <__errno>
 8001d6c:	2309      	movs	r3, #9
 8001d6e:	6003      	str	r3, [r0, #0]
 8001d70:	f04f 34ff 	mov.w	r4, #4294967295
 8001d74:	4620      	mov	r0, r4
 8001d76:	b003      	add	sp, #12
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7a:	2e02      	cmp	r6, #2
 8001d7c:	d903      	bls.n	8001d86 <_swilseek+0x2c>
 8001d7e:	f000 fb2b 	bl	80023d8 <__errno>
 8001d82:	2316      	movs	r3, #22
 8001d84:	e7f3      	b.n	8001d6e <_swilseek+0x14>
 8001d86:	2e01      	cmp	r6, #1
 8001d88:	d112      	bne.n	8001db0 <_swilseek+0x56>
 8001d8a:	6843      	ldr	r3, [r0, #4]
 8001d8c:	18e4      	adds	r4, r4, r3
 8001d8e:	d4f6      	bmi.n	8001d7e <_swilseek+0x24>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	260a      	movs	r6, #10
 8001d94:	466f      	mov	r7, sp
 8001d96:	e9cd 3400 	strd	r3, r4, [sp]
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	4639      	mov	r1, r7
 8001d9e:	beab      	bkpt	0x00ab
 8001da0:	4606      	mov	r6, r0
 8001da2:	4630      	mov	r0, r6
 8001da4:	f7ff ffaa 	bl	8001cfc <checkerror>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	dbe1      	blt.n	8001d70 <_swilseek+0x16>
 8001dac:	606c      	str	r4, [r5, #4]
 8001dae:	e7e1      	b.n	8001d74 <_swilseek+0x1a>
 8001db0:	2e02      	cmp	r6, #2
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	d1ec      	bne.n	8001d90 <_swilseek+0x36>
 8001db6:	260c      	movs	r6, #12
 8001db8:	466f      	mov	r7, sp
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	4639      	mov	r1, r7
 8001dc0:	beab      	bkpt	0x00ab
 8001dc2:	4606      	mov	r6, r0
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f7ff ff99 	bl	8001cfc <checkerror>
 8001dca:	1c43      	adds	r3, r0, #1
 8001dcc:	d0d0      	beq.n	8001d70 <_swilseek+0x16>
 8001dce:	4404      	add	r4, r0
 8001dd0:	e7de      	b.n	8001d90 <_swilseek+0x36>

08001dd2 <_lseek>:
 8001dd2:	f7ff bfc2 	b.w	8001d5a <_swilseek>

08001dd6 <_swiwrite>:
 8001dd6:	b530      	push	{r4, r5, lr}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	2405      	movs	r4, #5
 8001ddc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001de0:	9203      	str	r2, [sp, #12]
 8001de2:	ad01      	add	r5, sp, #4
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	beab      	bkpt	0x00ab
 8001dea:	4604      	mov	r4, r0
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff ff85 	bl	8001cfc <checkerror>
 8001df2:	b005      	add	sp, #20
 8001df4:	bd30      	pop	{r4, r5, pc}

08001df6 <_write>:
 8001df6:	b570      	push	{r4, r5, r6, lr}
 8001df8:	460e      	mov	r6, r1
 8001dfa:	4615      	mov	r5, r2
 8001dfc:	f7ff ff56 	bl	8001cac <findslot>
 8001e00:	4604      	mov	r4, r0
 8001e02:	b930      	cbnz	r0, 8001e12 <_write+0x1c>
 8001e04:	f000 fae8 	bl	80023d8 <__errno>
 8001e08:	2309      	movs	r3, #9
 8001e0a:	6003      	str	r3, [r0, #0]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	bd70      	pop	{r4, r5, r6, pc}
 8001e12:	462a      	mov	r2, r5
 8001e14:	4631      	mov	r1, r6
 8001e16:	6800      	ldr	r0, [r0, #0]
 8001e18:	f7ff ffdd 	bl	8001dd6 <_swiwrite>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	dbf5      	blt.n	8001e0c <_write+0x16>
 8001e20:	6862      	ldr	r2, [r4, #4]
 8001e22:	1ae8      	subs	r0, r5, r3
 8001e24:	4402      	add	r2, r0
 8001e26:	42ab      	cmp	r3, r5
 8001e28:	6062      	str	r2, [r4, #4]
 8001e2a:	d1f1      	bne.n	8001e10 <_write+0x1a>
 8001e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff bf55 	b.w	8001ce0 <error>

08001e36 <_swiclose>:
 8001e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e38:	2402      	movs	r4, #2
 8001e3a:	9001      	str	r0, [sp, #4]
 8001e3c:	ad01      	add	r5, sp, #4
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	beab      	bkpt	0x00ab
 8001e44:	4604      	mov	r4, r0
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff ff58 	bl	8001cfc <checkerror>
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd30      	pop	{r4, r5, pc}

08001e50 <_close>:
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	4605      	mov	r5, r0
 8001e54:	f7ff ff2a 	bl	8001cac <findslot>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	b930      	cbnz	r0, 8001e6a <_close+0x1a>
 8001e5c:	f000 fabc 	bl	80023d8 <__errno>
 8001e60:	2309      	movs	r3, #9
 8001e62:	6003      	str	r3, [r0, #0]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	bd38      	pop	{r3, r4, r5, pc}
 8001e6a:	3d01      	subs	r5, #1
 8001e6c:	2d01      	cmp	r5, #1
 8001e6e:	d809      	bhi.n	8001e84 <_close+0x34>
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <_close+0x40>)
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d104      	bne.n	8001e84 <_close+0x34>
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	2000      	movs	r0, #0
 8001e80:	6023      	str	r3, [r4, #0]
 8001e82:	e7f1      	b.n	8001e68 <_close+0x18>
 8001e84:	6820      	ldr	r0, [r4, #0]
 8001e86:	f7ff ffd6 	bl	8001e36 <_swiclose>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d0f5      	beq.n	8001e7a <_close+0x2a>
 8001e8e:	e7eb      	b.n	8001e68 <_close+0x18>
 8001e90:	20000174 	.word	0x20000174

08001e94 <_swistat>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460c      	mov	r4, r1
 8001e98:	f7ff ff08 	bl	8001cac <findslot>
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	b930      	cbnz	r0, 8001eae <_swistat+0x1a>
 8001ea0:	f000 fa9a 	bl	80023d8 <__errno>
 8001ea4:	2309      	movs	r3, #9
 8001ea6:	6003      	str	r3, [r0, #0]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
 8001eae:	6863      	ldr	r3, [r4, #4]
 8001eb0:	260c      	movs	r6, #12
 8001eb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eb6:	6063      	str	r3, [r4, #4]
 8001eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ebc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001ebe:	4630      	mov	r0, r6
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	beab      	bkpt	0x00ab
 8001ec4:	4605      	mov	r5, r0
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f7ff ff18 	bl	8001cfc <checkerror>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d0eb      	beq.n	8001ea8 <_swistat+0x14>
 8001ed0:	6120      	str	r0, [r4, #16]
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	e7ea      	b.n	8001eac <_swistat+0x18>

08001ed6 <_fstat>:
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	2100      	movs	r1, #0
 8001edc:	4604      	mov	r4, r0
 8001ede:	2258      	movs	r2, #88	@ 0x58
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fa2a 	bl	800233a <memset>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	4620      	mov	r0, r4
 8001eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eee:	f7ff bfd1 	b.w	8001e94 <_swistat>

08001ef2 <_isatty>:
 8001ef2:	b570      	push	{r4, r5, r6, lr}
 8001ef4:	f7ff feda 	bl	8001cac <findslot>
 8001ef8:	2409      	movs	r4, #9
 8001efa:	4605      	mov	r5, r0
 8001efc:	b920      	cbnz	r0, 8001f08 <_isatty+0x16>
 8001efe:	f000 fa6b 	bl	80023d8 <__errno>
 8001f02:	6004      	str	r4, [r0, #0]
 8001f04:	2000      	movs	r0, #0
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	beab      	bkpt	0x00ab
 8001f0e:	4604      	mov	r4, r0
 8001f10:	2c01      	cmp	r4, #1
 8001f12:	4620      	mov	r0, r4
 8001f14:	d0f7      	beq.n	8001f06 <_isatty+0x14>
 8001f16:	f000 fa5f 	bl	80023d8 <__errno>
 8001f1a:	2513      	movs	r5, #19
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	2600      	movs	r6, #0
 8001f20:	4628      	mov	r0, r5
 8001f22:	4631      	mov	r1, r6
 8001f24:	beab      	bkpt	0x00ab
 8001f26:	4605      	mov	r5, r0
 8001f28:	6025      	str	r5, [r4, #0]
 8001f2a:	e7eb      	b.n	8001f04 <_isatty+0x12>

08001f2c <__sflush_r>:
 8001f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	0716      	lsls	r6, r2, #28
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	d454      	bmi.n	8001fe4 <__sflush_r+0xb8>
 8001f3a:	684b      	ldr	r3, [r1, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dc02      	bgt.n	8001f46 <__sflush_r+0x1a>
 8001f40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dd48      	ble.n	8001fd8 <__sflush_r+0xac>
 8001f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f48:	2e00      	cmp	r6, #0
 8001f4a:	d045      	beq.n	8001fd8 <__sflush_r+0xac>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001f52:	682f      	ldr	r7, [r5, #0]
 8001f54:	6a21      	ldr	r1, [r4, #32]
 8001f56:	602b      	str	r3, [r5, #0]
 8001f58:	d030      	beq.n	8001fbc <__sflush_r+0x90>
 8001f5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f5c:	89a3      	ldrh	r3, [r4, #12]
 8001f5e:	0759      	lsls	r1, r3, #29
 8001f60:	d505      	bpl.n	8001f6e <__sflush_r+0x42>
 8001f62:	6863      	ldr	r3, [r4, #4]
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001f68:	b10b      	cbz	r3, 8001f6e <__sflush_r+0x42>
 8001f6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	2300      	movs	r3, #0
 8001f70:	4628      	mov	r0, r5
 8001f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f74:	6a21      	ldr	r1, [r4, #32]
 8001f76:	47b0      	blx	r6
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	89a3      	ldrh	r3, [r4, #12]
 8001f7c:	d106      	bne.n	8001f8c <__sflush_r+0x60>
 8001f7e:	6829      	ldr	r1, [r5, #0]
 8001f80:	291d      	cmp	r1, #29
 8001f82:	d82b      	bhi.n	8001fdc <__sflush_r+0xb0>
 8001f84:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <__sflush_r+0xfc>)
 8001f86:	410a      	asrs	r2, r1
 8001f88:	07d6      	lsls	r6, r2, #31
 8001f8a:	d427      	bmi.n	8001fdc <__sflush_r+0xb0>
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6062      	str	r2, [r4, #4]
 8001f90:	6922      	ldr	r2, [r4, #16]
 8001f92:	04d9      	lsls	r1, r3, #19
 8001f94:	6022      	str	r2, [r4, #0]
 8001f96:	d504      	bpl.n	8001fa2 <__sflush_r+0x76>
 8001f98:	1c42      	adds	r2, r0, #1
 8001f9a:	d101      	bne.n	8001fa0 <__sflush_r+0x74>
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	b903      	cbnz	r3, 8001fa2 <__sflush_r+0x76>
 8001fa0:	6560      	str	r0, [r4, #84]	@ 0x54
 8001fa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fa4:	602f      	str	r7, [r5, #0]
 8001fa6:	b1b9      	cbz	r1, 8001fd8 <__sflush_r+0xac>
 8001fa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001fac:	4299      	cmp	r1, r3
 8001fae:	d002      	beq.n	8001fb6 <__sflush_r+0x8a>
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f000 fa3f 	bl	8002434 <_free_r>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001fba:	e00d      	b.n	8001fd8 <__sflush_r+0xac>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	47b0      	blx	r6
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	1c50      	adds	r0, r2, #1
 8001fc6:	d1c9      	bne.n	8001f5c <__sflush_r+0x30>
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0c6      	beq.n	8001f5c <__sflush_r+0x30>
 8001fce:	2b1d      	cmp	r3, #29
 8001fd0:	d001      	beq.n	8001fd6 <__sflush_r+0xaa>
 8001fd2:	2b16      	cmp	r3, #22
 8001fd4:	d11d      	bne.n	8002012 <__sflush_r+0xe6>
 8001fd6:	602f      	str	r7, [r5, #0]
 8001fd8:	2000      	movs	r0, #0
 8001fda:	e021      	b.n	8002020 <__sflush_r+0xf4>
 8001fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	e01a      	b.n	800201a <__sflush_r+0xee>
 8001fe4:	690f      	ldr	r7, [r1, #16]
 8001fe6:	2f00      	cmp	r7, #0
 8001fe8:	d0f6      	beq.n	8001fd8 <__sflush_r+0xac>
 8001fea:	0793      	lsls	r3, r2, #30
 8001fec:	bf18      	it	ne
 8001fee:	2300      	movne	r3, #0
 8001ff0:	680e      	ldr	r6, [r1, #0]
 8001ff2:	bf08      	it	eq
 8001ff4:	694b      	ldreq	r3, [r1, #20]
 8001ff6:	1bf6      	subs	r6, r6, r7
 8001ff8:	600f      	str	r7, [r1, #0]
 8001ffa:	608b      	str	r3, [r1, #8]
 8001ffc:	2e00      	cmp	r6, #0
 8001ffe:	ddeb      	ble.n	8001fd8 <__sflush_r+0xac>
 8002000:	4633      	mov	r3, r6
 8002002:	463a      	mov	r2, r7
 8002004:	4628      	mov	r0, r5
 8002006:	6a21      	ldr	r1, [r4, #32]
 8002008:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800200c:	47e0      	blx	ip
 800200e:	2800      	cmp	r0, #0
 8002010:	dc07      	bgt.n	8002022 <__sflush_r+0xf6>
 8002012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
 800201e:	81a3      	strh	r3, [r4, #12]
 8002020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002022:	4407      	add	r7, r0
 8002024:	1a36      	subs	r6, r6, r0
 8002026:	e7e9      	b.n	8001ffc <__sflush_r+0xd0>
 8002028:	dfbffffe 	.word	0xdfbffffe

0800202c <_fflush_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	690b      	ldr	r3, [r1, #16]
 8002030:	4605      	mov	r5, r0
 8002032:	460c      	mov	r4, r1
 8002034:	b913      	cbnz	r3, 800203c <_fflush_r+0x10>
 8002036:	2500      	movs	r5, #0
 8002038:	4628      	mov	r0, r5
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	b118      	cbz	r0, 8002046 <_fflush_r+0x1a>
 800203e:	6a03      	ldr	r3, [r0, #32]
 8002040:	b90b      	cbnz	r3, 8002046 <_fflush_r+0x1a>
 8002042:	f000 f8bb 	bl	80021bc <__sinit>
 8002046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f3      	beq.n	8002036 <_fflush_r+0xa>
 800204e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002050:	07d0      	lsls	r0, r2, #31
 8002052:	d404      	bmi.n	800205e <_fflush_r+0x32>
 8002054:	0599      	lsls	r1, r3, #22
 8002056:	d402      	bmi.n	800205e <_fflush_r+0x32>
 8002058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800205a:	f000 f9e8 	bl	800242e <__retarget_lock_acquire_recursive>
 800205e:	4628      	mov	r0, r5
 8002060:	4621      	mov	r1, r4
 8002062:	f7ff ff63 	bl	8001f2c <__sflush_r>
 8002066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002068:	4605      	mov	r5, r0
 800206a:	07da      	lsls	r2, r3, #31
 800206c:	d4e4      	bmi.n	8002038 <_fflush_r+0xc>
 800206e:	89a3      	ldrh	r3, [r4, #12]
 8002070:	059b      	lsls	r3, r3, #22
 8002072:	d4e1      	bmi.n	8002038 <_fflush_r+0xc>
 8002074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002076:	f000 f9db 	bl	8002430 <__retarget_lock_release_recursive>
 800207a:	e7dd      	b.n	8002038 <_fflush_r+0xc>

0800207c <fflush>:
 800207c:	4601      	mov	r1, r0
 800207e:	b920      	cbnz	r0, 800208a <fflush+0xe>
 8002080:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <fflush+0x18>)
 8002082:	4905      	ldr	r1, [pc, #20]	@ (8002098 <fflush+0x1c>)
 8002084:	4805      	ldr	r0, [pc, #20]	@ (800209c <fflush+0x20>)
 8002086:	f000 b8b1 	b.w	80021ec <_fwalk_sglue>
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <fflush+0x24>)
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f7ff bfcd 	b.w	800202c <_fflush_r>
 8002092:	bf00      	nop
 8002094:	20000050 	.word	0x20000050
 8002098:	0800202d 	.word	0x0800202d
 800209c:	20000060 	.word	0x20000060
 80020a0:	2000005c 	.word	0x2000005c

080020a4 <std>:
 80020a4:	2300      	movs	r3, #0
 80020a6:	b510      	push	{r4, lr}
 80020a8:	4604      	mov	r4, r0
 80020aa:	e9c0 3300 	strd	r3, r3, [r0]
 80020ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020b2:	6083      	str	r3, [r0, #8]
 80020b4:	8181      	strh	r1, [r0, #12]
 80020b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80020b8:	81c2      	strh	r2, [r0, #14]
 80020ba:	6183      	str	r3, [r0, #24]
 80020bc:	4619      	mov	r1, r3
 80020be:	2208      	movs	r2, #8
 80020c0:	305c      	adds	r0, #92	@ 0x5c
 80020c2:	f000 f93a 	bl	800233a <memset>
 80020c6:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <std+0x58>)
 80020c8:	6224      	str	r4, [r4, #32]
 80020ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <std+0x5c>)
 80020ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <std+0x60>)
 80020d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <std+0x64>)
 80020d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <std+0x68>)
 80020da:	429c      	cmp	r4, r3
 80020dc:	d006      	beq.n	80020ec <std+0x48>
 80020de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80020e2:	4294      	cmp	r4, r2
 80020e4:	d002      	beq.n	80020ec <std+0x48>
 80020e6:	33d0      	adds	r3, #208	@ 0xd0
 80020e8:	429c      	cmp	r4, r3
 80020ea:	d105      	bne.n	80020f8 <std+0x54>
 80020ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80020f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020f4:	f000 b99a 	b.w	800242c <__retarget_lock_init_recursive>
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	bf00      	nop
 80020fc:	080022b5 	.word	0x080022b5
 8002100:	080022d7 	.word	0x080022d7
 8002104:	0800230f 	.word	0x0800230f
 8002108:	08002333 	.word	0x08002333
 800210c:	20000214 	.word	0x20000214

08002110 <stdio_exit_handler>:
 8002110:	4a02      	ldr	r2, [pc, #8]	@ (800211c <stdio_exit_handler+0xc>)
 8002112:	4903      	ldr	r1, [pc, #12]	@ (8002120 <stdio_exit_handler+0x10>)
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <stdio_exit_handler+0x14>)
 8002116:	f000 b869 	b.w	80021ec <_fwalk_sglue>
 800211a:	bf00      	nop
 800211c:	20000050 	.word	0x20000050
 8002120:	0800202d 	.word	0x0800202d
 8002124:	20000060 	.word	0x20000060

08002128 <cleanup_stdio>:
 8002128:	6841      	ldr	r1, [r0, #4]
 800212a:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <cleanup_stdio+0x34>)
 800212c:	b510      	push	{r4, lr}
 800212e:	4299      	cmp	r1, r3
 8002130:	4604      	mov	r4, r0
 8002132:	d001      	beq.n	8002138 <cleanup_stdio+0x10>
 8002134:	f7ff ff7a 	bl	800202c <_fflush_r>
 8002138:	68a1      	ldr	r1, [r4, #8]
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <cleanup_stdio+0x38>)
 800213c:	4299      	cmp	r1, r3
 800213e:	d002      	beq.n	8002146 <cleanup_stdio+0x1e>
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff73 	bl	800202c <_fflush_r>
 8002146:	68e1      	ldr	r1, [r4, #12]
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <cleanup_stdio+0x3c>)
 800214a:	4299      	cmp	r1, r3
 800214c:	d004      	beq.n	8002158 <cleanup_stdio+0x30>
 800214e:	4620      	mov	r0, r4
 8002150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002154:	f7ff bf6a 	b.w	800202c <_fflush_r>
 8002158:	bd10      	pop	{r4, pc}
 800215a:	bf00      	nop
 800215c:	20000214 	.word	0x20000214
 8002160:	2000027c 	.word	0x2000027c
 8002164:	200002e4 	.word	0x200002e4

08002168 <global_stdio_init.part.0>:
 8002168:	b510      	push	{r4, lr}
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <global_stdio_init.part.0+0x30>)
 800216c:	4c0b      	ldr	r4, [pc, #44]	@ (800219c <global_stdio_init.part.0+0x34>)
 800216e:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <global_stdio_init.part.0+0x38>)
 8002170:	4620      	mov	r0, r4
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	2104      	movs	r1, #4
 8002176:	2200      	movs	r2, #0
 8002178:	f7ff ff94 	bl	80020a4 <std>
 800217c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002180:	2201      	movs	r2, #1
 8002182:	2109      	movs	r1, #9
 8002184:	f7ff ff8e 	bl	80020a4 <std>
 8002188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800218c:	2202      	movs	r2, #2
 800218e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002192:	2112      	movs	r1, #18
 8002194:	f7ff bf86 	b.w	80020a4 <std>
 8002198:	2000034c 	.word	0x2000034c
 800219c:	20000214 	.word	0x20000214
 80021a0:	08002111 	.word	0x08002111

080021a4 <__sfp_lock_acquire>:
 80021a4:	4801      	ldr	r0, [pc, #4]	@ (80021ac <__sfp_lock_acquire+0x8>)
 80021a6:	f000 b942 	b.w	800242e <__retarget_lock_acquire_recursive>
 80021aa:	bf00      	nop
 80021ac:	20000355 	.word	0x20000355

080021b0 <__sfp_lock_release>:
 80021b0:	4801      	ldr	r0, [pc, #4]	@ (80021b8 <__sfp_lock_release+0x8>)
 80021b2:	f000 b93d 	b.w	8002430 <__retarget_lock_release_recursive>
 80021b6:	bf00      	nop
 80021b8:	20000355 	.word	0x20000355

080021bc <__sinit>:
 80021bc:	b510      	push	{r4, lr}
 80021be:	4604      	mov	r4, r0
 80021c0:	f7ff fff0 	bl	80021a4 <__sfp_lock_acquire>
 80021c4:	6a23      	ldr	r3, [r4, #32]
 80021c6:	b11b      	cbz	r3, 80021d0 <__sinit+0x14>
 80021c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021cc:	f7ff bff0 	b.w	80021b0 <__sfp_lock_release>
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__sinit+0x28>)
 80021d2:	6223      	str	r3, [r4, #32]
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <__sinit+0x2c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f5      	bne.n	80021c8 <__sinit+0xc>
 80021dc:	f7ff ffc4 	bl	8002168 <global_stdio_init.part.0>
 80021e0:	e7f2      	b.n	80021c8 <__sinit+0xc>
 80021e2:	bf00      	nop
 80021e4:	08002129 	.word	0x08002129
 80021e8:	2000034c 	.word	0x2000034c

080021ec <_fwalk_sglue>:
 80021ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021f0:	4607      	mov	r7, r0
 80021f2:	4688      	mov	r8, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	2600      	movs	r6, #0
 80021f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002200:	d505      	bpl.n	800220e <_fwalk_sglue+0x22>
 8002202:	6824      	ldr	r4, [r4, #0]
 8002204:	2c00      	cmp	r4, #0
 8002206:	d1f7      	bne.n	80021f8 <_fwalk_sglue+0xc>
 8002208:	4630      	mov	r0, r6
 800220a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800220e:	89ab      	ldrh	r3, [r5, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d907      	bls.n	8002224 <_fwalk_sglue+0x38>
 8002214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002218:	3301      	adds	r3, #1
 800221a:	d003      	beq.n	8002224 <_fwalk_sglue+0x38>
 800221c:	4629      	mov	r1, r5
 800221e:	4638      	mov	r0, r7
 8002220:	47c0      	blx	r8
 8002222:	4306      	orrs	r6, r0
 8002224:	3568      	adds	r5, #104	@ 0x68
 8002226:	e7e9      	b.n	80021fc <_fwalk_sglue+0x10>

08002228 <iprintf>:
 8002228:	b40f      	push	{r0, r1, r2, r3}
 800222a:	b507      	push	{r0, r1, r2, lr}
 800222c:	4906      	ldr	r1, [pc, #24]	@ (8002248 <iprintf+0x20>)
 800222e:	ab04      	add	r3, sp, #16
 8002230:	6808      	ldr	r0, [r1, #0]
 8002232:	f853 2b04 	ldr.w	r2, [r3], #4
 8002236:	6881      	ldr	r1, [r0, #8]
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f000 fb71 	bl	8002920 <_vfiprintf_r>
 800223e:	b003      	add	sp, #12
 8002240:	f85d eb04 	ldr.w	lr, [sp], #4
 8002244:	b004      	add	sp, #16
 8002246:	4770      	bx	lr
 8002248:	2000005c 	.word	0x2000005c

0800224c <sniprintf>:
 800224c:	b40c      	push	{r2, r3}
 800224e:	b530      	push	{r4, r5, lr}
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <sniprintf+0x64>)
 8002252:	1e0c      	subs	r4, r1, #0
 8002254:	681d      	ldr	r5, [r3, #0]
 8002256:	b09d      	sub	sp, #116	@ 0x74
 8002258:	da08      	bge.n	800226c <sniprintf+0x20>
 800225a:	238b      	movs	r3, #139	@ 0x8b
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	602b      	str	r3, [r5, #0]
 8002262:	b01d      	add	sp, #116	@ 0x74
 8002264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002268:	b002      	add	sp, #8
 800226a:	4770      	bx	lr
 800226c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002270:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002274:	bf0c      	ite	eq
 8002276:	4623      	moveq	r3, r4
 8002278:	f104 33ff 	addne.w	r3, r4, #4294967295
 800227c:	9304      	str	r3, [sp, #16]
 800227e:	9307      	str	r3, [sp, #28]
 8002280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002284:	9002      	str	r0, [sp, #8]
 8002286:	9006      	str	r0, [sp, #24]
 8002288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800228c:	4628      	mov	r0, r5
 800228e:	ab21      	add	r3, sp, #132	@ 0x84
 8002290:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002292:	a902      	add	r1, sp, #8
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	f000 fa1f 	bl	80026d8 <_svfiprintf_r>
 800229a:	1c43      	adds	r3, r0, #1
 800229c:	bfbc      	itt	lt
 800229e:	238b      	movlt	r3, #139	@ 0x8b
 80022a0:	602b      	strlt	r3, [r5, #0]
 80022a2:	2c00      	cmp	r4, #0
 80022a4:	d0dd      	beq.n	8002262 <sniprintf+0x16>
 80022a6:	2200      	movs	r2, #0
 80022a8:	9b02      	ldr	r3, [sp, #8]
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e7d9      	b.n	8002262 <sniprintf+0x16>
 80022ae:	bf00      	nop
 80022b0:	2000005c 	.word	0x2000005c

080022b4 <__sread>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	460c      	mov	r4, r1
 80022b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022bc:	f000 f868 	bl	8002390 <_read_r>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	bfab      	itete	ge
 80022c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80022c6:	89a3      	ldrhlt	r3, [r4, #12]
 80022c8:	181b      	addge	r3, r3, r0
 80022ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022ce:	bfac      	ite	ge
 80022d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022d2:	81a3      	strhlt	r3, [r4, #12]
 80022d4:	bd10      	pop	{r4, pc}

080022d6 <__swrite>:
 80022d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022da:	461f      	mov	r7, r3
 80022dc:	898b      	ldrh	r3, [r1, #12]
 80022de:	4605      	mov	r5, r0
 80022e0:	05db      	lsls	r3, r3, #23
 80022e2:	460c      	mov	r4, r1
 80022e4:	4616      	mov	r6, r2
 80022e6:	d505      	bpl.n	80022f4 <__swrite+0x1e>
 80022e8:	2302      	movs	r3, #2
 80022ea:	2200      	movs	r2, #0
 80022ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f0:	f000 f83c 	bl	800236c <_lseek_r>
 80022f4:	89a3      	ldrh	r3, [r4, #12]
 80022f6:	4632      	mov	r2, r6
 80022f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022fc:	81a3      	strh	r3, [r4, #12]
 80022fe:	4628      	mov	r0, r5
 8002300:	463b      	mov	r3, r7
 8002302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800230a:	f000 b853 	b.w	80023b4 <_write_r>

0800230e <__sseek>:
 800230e:	b510      	push	{r4, lr}
 8002310:	460c      	mov	r4, r1
 8002312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002316:	f000 f829 	bl	800236c <_lseek_r>
 800231a:	1c43      	adds	r3, r0, #1
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	bf15      	itete	ne
 8002320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800232a:	81a3      	strheq	r3, [r4, #12]
 800232c:	bf18      	it	ne
 800232e:	81a3      	strhne	r3, [r4, #12]
 8002330:	bd10      	pop	{r4, pc}

08002332 <__sclose>:
 8002332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002336:	f000 b809 	b.w	800234c <_close_r>

0800233a <memset>:
 800233a:	4603      	mov	r3, r0
 800233c:	4402      	add	r2, r0
 800233e:	4293      	cmp	r3, r2
 8002340:	d100      	bne.n	8002344 <memset+0xa>
 8002342:	4770      	bx	lr
 8002344:	f803 1b01 	strb.w	r1, [r3], #1
 8002348:	e7f9      	b.n	800233e <memset+0x4>
	...

0800234c <_close_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	2300      	movs	r3, #0
 8002350:	4d05      	ldr	r5, [pc, #20]	@ (8002368 <_close_r+0x1c>)
 8002352:	4604      	mov	r4, r0
 8002354:	4608      	mov	r0, r1
 8002356:	602b      	str	r3, [r5, #0]
 8002358:	f7ff fd7a 	bl	8001e50 <_close>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_close_r+0x1a>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	b103      	cbz	r3, 8002366 <_close_r+0x1a>
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	20000350 	.word	0x20000350

0800236c <_lseek_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	2200      	movs	r2, #0
 8002376:	4d05      	ldr	r5, [pc, #20]	@ (800238c <_lseek_r+0x20>)
 8002378:	602a      	str	r2, [r5, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	f7ff fd29 	bl	8001dd2 <_lseek>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d102      	bne.n	800238a <_lseek_r+0x1e>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	b103      	cbz	r3, 800238a <_lseek_r+0x1e>
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	bd38      	pop	{r3, r4, r5, pc}
 800238c:	20000350 	.word	0x20000350

08002390 <_read_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	2200      	movs	r2, #0
 800239a:	4d05      	ldr	r5, [pc, #20]	@ (80023b0 <_read_r+0x20>)
 800239c:	602a      	str	r2, [r5, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	f7ff fcc1 	bl	8001d26 <_read>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d102      	bne.n	80023ae <_read_r+0x1e>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	b103      	cbz	r3, 80023ae <_read_r+0x1e>
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	20000350 	.word	0x20000350

080023b4 <_write_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4604      	mov	r4, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	2200      	movs	r2, #0
 80023be:	4d05      	ldr	r5, [pc, #20]	@ (80023d4 <_write_r+0x20>)
 80023c0:	602a      	str	r2, [r5, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f7ff fd17 	bl	8001df6 <_write>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	d102      	bne.n	80023d2 <_write_r+0x1e>
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	b103      	cbz	r3, 80023d2 <_write_r+0x1e>
 80023d0:	6023      	str	r3, [r4, #0]
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	20000350 	.word	0x20000350

080023d8 <__errno>:
 80023d8:	4b01      	ldr	r3, [pc, #4]	@ (80023e0 <__errno+0x8>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	2000005c 	.word	0x2000005c

080023e4 <__libc_init_array>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	2600      	movs	r6, #0
 80023e8:	4d0c      	ldr	r5, [pc, #48]	@ (800241c <__libc_init_array+0x38>)
 80023ea:	4c0d      	ldr	r4, [pc, #52]	@ (8002420 <__libc_init_array+0x3c>)
 80023ec:	1b64      	subs	r4, r4, r5
 80023ee:	10a4      	asrs	r4, r4, #2
 80023f0:	42a6      	cmp	r6, r4
 80023f2:	d109      	bne.n	8002408 <__libc_init_array+0x24>
 80023f4:	f000 fed2 	bl	800319c <_init>
 80023f8:	2600      	movs	r6, #0
 80023fa:	4d0a      	ldr	r5, [pc, #40]	@ (8002424 <__libc_init_array+0x40>)
 80023fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002428 <__libc_init_array+0x44>)
 80023fe:	1b64      	subs	r4, r4, r5
 8002400:	10a4      	asrs	r4, r4, #2
 8002402:	42a6      	cmp	r6, r4
 8002404:	d105      	bne.n	8002412 <__libc_init_array+0x2e>
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	f855 3b04 	ldr.w	r3, [r5], #4
 800240c:	4798      	blx	r3
 800240e:	3601      	adds	r6, #1
 8002410:	e7ee      	b.n	80023f0 <__libc_init_array+0xc>
 8002412:	f855 3b04 	ldr.w	r3, [r5], #4
 8002416:	4798      	blx	r3
 8002418:	3601      	adds	r6, #1
 800241a:	e7f2      	b.n	8002402 <__libc_init_array+0x1e>
 800241c:	08003470 	.word	0x08003470
 8002420:	08003470 	.word	0x08003470
 8002424:	08003470 	.word	0x08003470
 8002428:	08003474 	.word	0x08003474

0800242c <__retarget_lock_init_recursive>:
 800242c:	4770      	bx	lr

0800242e <__retarget_lock_acquire_recursive>:
 800242e:	4770      	bx	lr

08002430 <__retarget_lock_release_recursive>:
 8002430:	4770      	bx	lr
	...

08002434 <_free_r>:
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4605      	mov	r5, r0
 8002438:	2900      	cmp	r1, #0
 800243a:	d040      	beq.n	80024be <_free_r+0x8a>
 800243c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002440:	1f0c      	subs	r4, r1, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	bfb8      	it	lt
 8002446:	18e4      	addlt	r4, r4, r3
 8002448:	f000 f8de 	bl	8002608 <__malloc_lock>
 800244c:	4a1c      	ldr	r2, [pc, #112]	@ (80024c0 <_free_r+0x8c>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	b933      	cbnz	r3, 8002460 <_free_r+0x2c>
 8002452:	6063      	str	r3, [r4, #4]
 8002454:	6014      	str	r4, [r2, #0]
 8002456:	4628      	mov	r0, r5
 8002458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800245c:	f000 b8da 	b.w	8002614 <__malloc_unlock>
 8002460:	42a3      	cmp	r3, r4
 8002462:	d908      	bls.n	8002476 <_free_r+0x42>
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	1821      	adds	r1, r4, r0
 8002468:	428b      	cmp	r3, r1
 800246a:	bf01      	itttt	eq
 800246c:	6819      	ldreq	r1, [r3, #0]
 800246e:	685b      	ldreq	r3, [r3, #4]
 8002470:	1809      	addeq	r1, r1, r0
 8002472:	6021      	streq	r1, [r4, #0]
 8002474:	e7ed      	b.n	8002452 <_free_r+0x1e>
 8002476:	461a      	mov	r2, r3
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	b10b      	cbz	r3, 8002480 <_free_r+0x4c>
 800247c:	42a3      	cmp	r3, r4
 800247e:	d9fa      	bls.n	8002476 <_free_r+0x42>
 8002480:	6811      	ldr	r1, [r2, #0]
 8002482:	1850      	adds	r0, r2, r1
 8002484:	42a0      	cmp	r0, r4
 8002486:	d10b      	bne.n	80024a0 <_free_r+0x6c>
 8002488:	6820      	ldr	r0, [r4, #0]
 800248a:	4401      	add	r1, r0
 800248c:	1850      	adds	r0, r2, r1
 800248e:	4283      	cmp	r3, r0
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	d1e0      	bne.n	8002456 <_free_r+0x22>
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4408      	add	r0, r1
 800249a:	6010      	str	r0, [r2, #0]
 800249c:	6053      	str	r3, [r2, #4]
 800249e:	e7da      	b.n	8002456 <_free_r+0x22>
 80024a0:	d902      	bls.n	80024a8 <_free_r+0x74>
 80024a2:	230c      	movs	r3, #12
 80024a4:	602b      	str	r3, [r5, #0]
 80024a6:	e7d6      	b.n	8002456 <_free_r+0x22>
 80024a8:	6820      	ldr	r0, [r4, #0]
 80024aa:	1821      	adds	r1, r4, r0
 80024ac:	428b      	cmp	r3, r1
 80024ae:	bf01      	itttt	eq
 80024b0:	6819      	ldreq	r1, [r3, #0]
 80024b2:	685b      	ldreq	r3, [r3, #4]
 80024b4:	1809      	addeq	r1, r1, r0
 80024b6:	6021      	streq	r1, [r4, #0]
 80024b8:	6063      	str	r3, [r4, #4]
 80024ba:	6054      	str	r4, [r2, #4]
 80024bc:	e7cb      	b.n	8002456 <_free_r+0x22>
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	2000035c 	.word	0x2000035c

080024c4 <sbrk_aligned>:
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	4e0f      	ldr	r6, [pc, #60]	@ (8002504 <sbrk_aligned+0x40>)
 80024c8:	460c      	mov	r4, r1
 80024ca:	6831      	ldr	r1, [r6, #0]
 80024cc:	4605      	mov	r5, r0
 80024ce:	b911      	cbnz	r1, 80024d6 <sbrk_aligned+0x12>
 80024d0:	f000 fd7e 	bl	8002fd0 <_sbrk_r>
 80024d4:	6030      	str	r0, [r6, #0]
 80024d6:	4621      	mov	r1, r4
 80024d8:	4628      	mov	r0, r5
 80024da:	f000 fd79 	bl	8002fd0 <_sbrk_r>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	d103      	bne.n	80024ea <sbrk_aligned+0x26>
 80024e2:	f04f 34ff 	mov.w	r4, #4294967295
 80024e6:	4620      	mov	r0, r4
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
 80024ea:	1cc4      	adds	r4, r0, #3
 80024ec:	f024 0403 	bic.w	r4, r4, #3
 80024f0:	42a0      	cmp	r0, r4
 80024f2:	d0f8      	beq.n	80024e6 <sbrk_aligned+0x22>
 80024f4:	1a21      	subs	r1, r4, r0
 80024f6:	4628      	mov	r0, r5
 80024f8:	f000 fd6a 	bl	8002fd0 <_sbrk_r>
 80024fc:	3001      	adds	r0, #1
 80024fe:	d1f2      	bne.n	80024e6 <sbrk_aligned+0x22>
 8002500:	e7ef      	b.n	80024e2 <sbrk_aligned+0x1e>
 8002502:	bf00      	nop
 8002504:	20000358 	.word	0x20000358

08002508 <_malloc_r>:
 8002508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800250c:	1ccd      	adds	r5, r1, #3
 800250e:	f025 0503 	bic.w	r5, r5, #3
 8002512:	3508      	adds	r5, #8
 8002514:	2d0c      	cmp	r5, #12
 8002516:	bf38      	it	cc
 8002518:	250c      	movcc	r5, #12
 800251a:	2d00      	cmp	r5, #0
 800251c:	4606      	mov	r6, r0
 800251e:	db01      	blt.n	8002524 <_malloc_r+0x1c>
 8002520:	42a9      	cmp	r1, r5
 8002522:	d904      	bls.n	800252e <_malloc_r+0x26>
 8002524:	230c      	movs	r3, #12
 8002526:	6033      	str	r3, [r6, #0]
 8002528:	2000      	movs	r0, #0
 800252a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800252e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002604 <_malloc_r+0xfc>
 8002532:	f000 f869 	bl	8002608 <__malloc_lock>
 8002536:	f8d8 3000 	ldr.w	r3, [r8]
 800253a:	461c      	mov	r4, r3
 800253c:	bb44      	cbnz	r4, 8002590 <_malloc_r+0x88>
 800253e:	4629      	mov	r1, r5
 8002540:	4630      	mov	r0, r6
 8002542:	f7ff ffbf 	bl	80024c4 <sbrk_aligned>
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	4604      	mov	r4, r0
 800254a:	d158      	bne.n	80025fe <_malloc_r+0xf6>
 800254c:	f8d8 4000 	ldr.w	r4, [r8]
 8002550:	4627      	mov	r7, r4
 8002552:	2f00      	cmp	r7, #0
 8002554:	d143      	bne.n	80025de <_malloc_r+0xd6>
 8002556:	2c00      	cmp	r4, #0
 8002558:	d04b      	beq.n	80025f2 <_malloc_r+0xea>
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	4639      	mov	r1, r7
 800255e:	4630      	mov	r0, r6
 8002560:	eb04 0903 	add.w	r9, r4, r3
 8002564:	f000 fd34 	bl	8002fd0 <_sbrk_r>
 8002568:	4581      	cmp	r9, r0
 800256a:	d142      	bne.n	80025f2 <_malloc_r+0xea>
 800256c:	6821      	ldr	r1, [r4, #0]
 800256e:	4630      	mov	r0, r6
 8002570:	1a6d      	subs	r5, r5, r1
 8002572:	4629      	mov	r1, r5
 8002574:	f7ff ffa6 	bl	80024c4 <sbrk_aligned>
 8002578:	3001      	adds	r0, #1
 800257a:	d03a      	beq.n	80025f2 <_malloc_r+0xea>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	442b      	add	r3, r5
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	f8d8 3000 	ldr.w	r3, [r8]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	bb62      	cbnz	r2, 80025e4 <_malloc_r+0xdc>
 800258a:	f8c8 7000 	str.w	r7, [r8]
 800258e:	e00f      	b.n	80025b0 <_malloc_r+0xa8>
 8002590:	6822      	ldr	r2, [r4, #0]
 8002592:	1b52      	subs	r2, r2, r5
 8002594:	d420      	bmi.n	80025d8 <_malloc_r+0xd0>
 8002596:	2a0b      	cmp	r2, #11
 8002598:	d917      	bls.n	80025ca <_malloc_r+0xc2>
 800259a:	1961      	adds	r1, r4, r5
 800259c:	42a3      	cmp	r3, r4
 800259e:	6025      	str	r5, [r4, #0]
 80025a0:	bf18      	it	ne
 80025a2:	6059      	strne	r1, [r3, #4]
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	bf08      	it	eq
 80025a8:	f8c8 1000 	streq.w	r1, [r8]
 80025ac:	5162      	str	r2, [r4, r5]
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	4630      	mov	r0, r6
 80025b2:	f000 f82f 	bl	8002614 <__malloc_unlock>
 80025b6:	f104 000b 	add.w	r0, r4, #11
 80025ba:	1d23      	adds	r3, r4, #4
 80025bc:	f020 0007 	bic.w	r0, r0, #7
 80025c0:	1ac2      	subs	r2, r0, r3
 80025c2:	bf1c      	itt	ne
 80025c4:	1a1b      	subne	r3, r3, r0
 80025c6:	50a3      	strne	r3, [r4, r2]
 80025c8:	e7af      	b.n	800252a <_malloc_r+0x22>
 80025ca:	6862      	ldr	r2, [r4, #4]
 80025cc:	42a3      	cmp	r3, r4
 80025ce:	bf0c      	ite	eq
 80025d0:	f8c8 2000 	streq.w	r2, [r8]
 80025d4:	605a      	strne	r2, [r3, #4]
 80025d6:	e7eb      	b.n	80025b0 <_malloc_r+0xa8>
 80025d8:	4623      	mov	r3, r4
 80025da:	6864      	ldr	r4, [r4, #4]
 80025dc:	e7ae      	b.n	800253c <_malloc_r+0x34>
 80025de:	463c      	mov	r4, r7
 80025e0:	687f      	ldr	r7, [r7, #4]
 80025e2:	e7b6      	b.n	8002552 <_malloc_r+0x4a>
 80025e4:	461a      	mov	r2, r3
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	42a3      	cmp	r3, r4
 80025ea:	d1fb      	bne.n	80025e4 <_malloc_r+0xdc>
 80025ec:	2300      	movs	r3, #0
 80025ee:	6053      	str	r3, [r2, #4]
 80025f0:	e7de      	b.n	80025b0 <_malloc_r+0xa8>
 80025f2:	230c      	movs	r3, #12
 80025f4:	4630      	mov	r0, r6
 80025f6:	6033      	str	r3, [r6, #0]
 80025f8:	f000 f80c 	bl	8002614 <__malloc_unlock>
 80025fc:	e794      	b.n	8002528 <_malloc_r+0x20>
 80025fe:	6005      	str	r5, [r0, #0]
 8002600:	e7d6      	b.n	80025b0 <_malloc_r+0xa8>
 8002602:	bf00      	nop
 8002604:	2000035c 	.word	0x2000035c

08002608 <__malloc_lock>:
 8002608:	4801      	ldr	r0, [pc, #4]	@ (8002610 <__malloc_lock+0x8>)
 800260a:	f7ff bf10 	b.w	800242e <__retarget_lock_acquire_recursive>
 800260e:	bf00      	nop
 8002610:	20000354 	.word	0x20000354

08002614 <__malloc_unlock>:
 8002614:	4801      	ldr	r0, [pc, #4]	@ (800261c <__malloc_unlock+0x8>)
 8002616:	f7ff bf0b 	b.w	8002430 <__retarget_lock_release_recursive>
 800261a:	bf00      	nop
 800261c:	20000354 	.word	0x20000354

08002620 <__ssputs_r>:
 8002620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002624:	461f      	mov	r7, r3
 8002626:	688e      	ldr	r6, [r1, #8]
 8002628:	4682      	mov	sl, r0
 800262a:	42be      	cmp	r6, r7
 800262c:	460c      	mov	r4, r1
 800262e:	4690      	mov	r8, r2
 8002630:	680b      	ldr	r3, [r1, #0]
 8002632:	d82d      	bhi.n	8002690 <__ssputs_r+0x70>
 8002634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800263c:	d026      	beq.n	800268c <__ssputs_r+0x6c>
 800263e:	6965      	ldr	r5, [r4, #20]
 8002640:	6909      	ldr	r1, [r1, #16]
 8002642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002646:	eba3 0901 	sub.w	r9, r3, r1
 800264a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800264e:	1c7b      	adds	r3, r7, #1
 8002650:	444b      	add	r3, r9
 8002652:	106d      	asrs	r5, r5, #1
 8002654:	429d      	cmp	r5, r3
 8002656:	bf38      	it	cc
 8002658:	461d      	movcc	r5, r3
 800265a:	0553      	lsls	r3, r2, #21
 800265c:	d527      	bpl.n	80026ae <__ssputs_r+0x8e>
 800265e:	4629      	mov	r1, r5
 8002660:	f7ff ff52 	bl	8002508 <_malloc_r>
 8002664:	4606      	mov	r6, r0
 8002666:	b360      	cbz	r0, 80026c2 <__ssputs_r+0xa2>
 8002668:	464a      	mov	r2, r9
 800266a:	6921      	ldr	r1, [r4, #16]
 800266c:	f000 fcce 	bl	800300c <memcpy>
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267a:	81a3      	strh	r3, [r4, #12]
 800267c:	6126      	str	r6, [r4, #16]
 800267e:	444e      	add	r6, r9
 8002680:	6026      	str	r6, [r4, #0]
 8002682:	463e      	mov	r6, r7
 8002684:	6165      	str	r5, [r4, #20]
 8002686:	eba5 0509 	sub.w	r5, r5, r9
 800268a:	60a5      	str	r5, [r4, #8]
 800268c:	42be      	cmp	r6, r7
 800268e:	d900      	bls.n	8002692 <__ssputs_r+0x72>
 8002690:	463e      	mov	r6, r7
 8002692:	4632      	mov	r2, r6
 8002694:	4641      	mov	r1, r8
 8002696:	6820      	ldr	r0, [r4, #0]
 8002698:	f000 fc80 	bl	8002f9c <memmove>
 800269c:	2000      	movs	r0, #0
 800269e:	68a3      	ldr	r3, [r4, #8]
 80026a0:	1b9b      	subs	r3, r3, r6
 80026a2:	60a3      	str	r3, [r4, #8]
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	4433      	add	r3, r6
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ae:	462a      	mov	r2, r5
 80026b0:	f000 fcba 	bl	8003028 <_realloc_r>
 80026b4:	4606      	mov	r6, r0
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d1e0      	bne.n	800267c <__ssputs_r+0x5c>
 80026ba:	4650      	mov	r0, sl
 80026bc:	6921      	ldr	r1, [r4, #16]
 80026be:	f7ff feb9 	bl	8002434 <_free_r>
 80026c2:	230c      	movs	r3, #12
 80026c4:	f8ca 3000 	str.w	r3, [sl]
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295
 80026ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d2:	81a3      	strh	r3, [r4, #12]
 80026d4:	e7e9      	b.n	80026aa <__ssputs_r+0x8a>
	...

080026d8 <_svfiprintf_r>:
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	4698      	mov	r8, r3
 80026de:	898b      	ldrh	r3, [r1, #12]
 80026e0:	4607      	mov	r7, r0
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	460d      	mov	r5, r1
 80026e6:	4614      	mov	r4, r2
 80026e8:	b09d      	sub	sp, #116	@ 0x74
 80026ea:	d510      	bpl.n	800270e <_svfiprintf_r+0x36>
 80026ec:	690b      	ldr	r3, [r1, #16]
 80026ee:	b973      	cbnz	r3, 800270e <_svfiprintf_r+0x36>
 80026f0:	2140      	movs	r1, #64	@ 0x40
 80026f2:	f7ff ff09 	bl	8002508 <_malloc_r>
 80026f6:	6028      	str	r0, [r5, #0]
 80026f8:	6128      	str	r0, [r5, #16]
 80026fa:	b930      	cbnz	r0, 800270a <_svfiprintf_r+0x32>
 80026fc:	230c      	movs	r3, #12
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	b01d      	add	sp, #116	@ 0x74
 8002706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270a:	2340      	movs	r3, #64	@ 0x40
 800270c:	616b      	str	r3, [r5, #20]
 800270e:	2300      	movs	r3, #0
 8002710:	9309      	str	r3, [sp, #36]	@ 0x24
 8002712:	2320      	movs	r3, #32
 8002714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002718:	2330      	movs	r3, #48	@ 0x30
 800271a:	f04f 0901 	mov.w	r9, #1
 800271e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002722:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80028bc <_svfiprintf_r+0x1e4>
 8002726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800272a:	4623      	mov	r3, r4
 800272c:	469a      	mov	sl, r3
 800272e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002732:	b10a      	cbz	r2, 8002738 <_svfiprintf_r+0x60>
 8002734:	2a25      	cmp	r2, #37	@ 0x25
 8002736:	d1f9      	bne.n	800272c <_svfiprintf_r+0x54>
 8002738:	ebba 0b04 	subs.w	fp, sl, r4
 800273c:	d00b      	beq.n	8002756 <_svfiprintf_r+0x7e>
 800273e:	465b      	mov	r3, fp
 8002740:	4622      	mov	r2, r4
 8002742:	4629      	mov	r1, r5
 8002744:	4638      	mov	r0, r7
 8002746:	f7ff ff6b 	bl	8002620 <__ssputs_r>
 800274a:	3001      	adds	r0, #1
 800274c:	f000 80a7 	beq.w	800289e <_svfiprintf_r+0x1c6>
 8002750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002752:	445a      	add	r2, fp
 8002754:	9209      	str	r2, [sp, #36]	@ 0x24
 8002756:	f89a 3000 	ldrb.w	r3, [sl]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 809f 	beq.w	800289e <_svfiprintf_r+0x1c6>
 8002760:	2300      	movs	r3, #0
 8002762:	f04f 32ff 	mov.w	r2, #4294967295
 8002766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800276a:	f10a 0a01 	add.w	sl, sl, #1
 800276e:	9304      	str	r3, [sp, #16]
 8002770:	9307      	str	r3, [sp, #28]
 8002772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002776:	931a      	str	r3, [sp, #104]	@ 0x68
 8002778:	4654      	mov	r4, sl
 800277a:	2205      	movs	r2, #5
 800277c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002780:	484e      	ldr	r0, [pc, #312]	@ (80028bc <_svfiprintf_r+0x1e4>)
 8002782:	f000 fc35 	bl	8002ff0 <memchr>
 8002786:	9a04      	ldr	r2, [sp, #16]
 8002788:	b9d8      	cbnz	r0, 80027c2 <_svfiprintf_r+0xea>
 800278a:	06d0      	lsls	r0, r2, #27
 800278c:	bf44      	itt	mi
 800278e:	2320      	movmi	r3, #32
 8002790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002794:	0711      	lsls	r1, r2, #28
 8002796:	bf44      	itt	mi
 8002798:	232b      	movmi	r3, #43	@ 0x2b
 800279a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800279e:	f89a 3000 	ldrb.w	r3, [sl]
 80027a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027a4:	d015      	beq.n	80027d2 <_svfiprintf_r+0xfa>
 80027a6:	4654      	mov	r4, sl
 80027a8:	2000      	movs	r0, #0
 80027aa:	f04f 0c0a 	mov.w	ip, #10
 80027ae:	9a07      	ldr	r2, [sp, #28]
 80027b0:	4621      	mov	r1, r4
 80027b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027b6:	3b30      	subs	r3, #48	@ 0x30
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d94b      	bls.n	8002854 <_svfiprintf_r+0x17c>
 80027bc:	b1b0      	cbz	r0, 80027ec <_svfiprintf_r+0x114>
 80027be:	9207      	str	r2, [sp, #28]
 80027c0:	e014      	b.n	80027ec <_svfiprintf_r+0x114>
 80027c2:	eba0 0308 	sub.w	r3, r0, r8
 80027c6:	fa09 f303 	lsl.w	r3, r9, r3
 80027ca:	4313      	orrs	r3, r2
 80027cc:	46a2      	mov	sl, r4
 80027ce:	9304      	str	r3, [sp, #16]
 80027d0:	e7d2      	b.n	8002778 <_svfiprintf_r+0xa0>
 80027d2:	9b03      	ldr	r3, [sp, #12]
 80027d4:	1d19      	adds	r1, r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	9103      	str	r1, [sp, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bfbb      	ittet	lt
 80027de:	425b      	neglt	r3, r3
 80027e0:	f042 0202 	orrlt.w	r2, r2, #2
 80027e4:	9307      	strge	r3, [sp, #28]
 80027e6:	9307      	strlt	r3, [sp, #28]
 80027e8:	bfb8      	it	lt
 80027ea:	9204      	strlt	r2, [sp, #16]
 80027ec:	7823      	ldrb	r3, [r4, #0]
 80027ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80027f0:	d10a      	bne.n	8002808 <_svfiprintf_r+0x130>
 80027f2:	7863      	ldrb	r3, [r4, #1]
 80027f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80027f6:	d132      	bne.n	800285e <_svfiprintf_r+0x186>
 80027f8:	9b03      	ldr	r3, [sp, #12]
 80027fa:	3402      	adds	r4, #2
 80027fc:	1d1a      	adds	r2, r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	9203      	str	r2, [sp, #12]
 8002802:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002806:	9305      	str	r3, [sp, #20]
 8002808:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80028c0 <_svfiprintf_r+0x1e8>
 800280c:	2203      	movs	r2, #3
 800280e:	4650      	mov	r0, sl
 8002810:	7821      	ldrb	r1, [r4, #0]
 8002812:	f000 fbed 	bl	8002ff0 <memchr>
 8002816:	b138      	cbz	r0, 8002828 <_svfiprintf_r+0x150>
 8002818:	2240      	movs	r2, #64	@ 0x40
 800281a:	9b04      	ldr	r3, [sp, #16]
 800281c:	eba0 000a 	sub.w	r0, r0, sl
 8002820:	4082      	lsls	r2, r0
 8002822:	4313      	orrs	r3, r2
 8002824:	3401      	adds	r4, #1
 8002826:	9304      	str	r3, [sp, #16]
 8002828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282c:	2206      	movs	r2, #6
 800282e:	4825      	ldr	r0, [pc, #148]	@ (80028c4 <_svfiprintf_r+0x1ec>)
 8002830:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002834:	f000 fbdc 	bl	8002ff0 <memchr>
 8002838:	2800      	cmp	r0, #0
 800283a:	d036      	beq.n	80028aa <_svfiprintf_r+0x1d2>
 800283c:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <_svfiprintf_r+0x1f0>)
 800283e:	bb1b      	cbnz	r3, 8002888 <_svfiprintf_r+0x1b0>
 8002840:	9b03      	ldr	r3, [sp, #12]
 8002842:	3307      	adds	r3, #7
 8002844:	f023 0307 	bic.w	r3, r3, #7
 8002848:	3308      	adds	r3, #8
 800284a:	9303      	str	r3, [sp, #12]
 800284c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800284e:	4433      	add	r3, r6
 8002850:	9309      	str	r3, [sp, #36]	@ 0x24
 8002852:	e76a      	b.n	800272a <_svfiprintf_r+0x52>
 8002854:	460c      	mov	r4, r1
 8002856:	2001      	movs	r0, #1
 8002858:	fb0c 3202 	mla	r2, ip, r2, r3
 800285c:	e7a8      	b.n	80027b0 <_svfiprintf_r+0xd8>
 800285e:	2300      	movs	r3, #0
 8002860:	f04f 0c0a 	mov.w	ip, #10
 8002864:	4619      	mov	r1, r3
 8002866:	3401      	adds	r4, #1
 8002868:	9305      	str	r3, [sp, #20]
 800286a:	4620      	mov	r0, r4
 800286c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002870:	3a30      	subs	r2, #48	@ 0x30
 8002872:	2a09      	cmp	r2, #9
 8002874:	d903      	bls.n	800287e <_svfiprintf_r+0x1a6>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0c6      	beq.n	8002808 <_svfiprintf_r+0x130>
 800287a:	9105      	str	r1, [sp, #20]
 800287c:	e7c4      	b.n	8002808 <_svfiprintf_r+0x130>
 800287e:	4604      	mov	r4, r0
 8002880:	2301      	movs	r3, #1
 8002882:	fb0c 2101 	mla	r1, ip, r1, r2
 8002886:	e7f0      	b.n	800286a <_svfiprintf_r+0x192>
 8002888:	ab03      	add	r3, sp, #12
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	462a      	mov	r2, r5
 800288e:	4638      	mov	r0, r7
 8002890:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <_svfiprintf_r+0x1f4>)
 8002892:	a904      	add	r1, sp, #16
 8002894:	f3af 8000 	nop.w
 8002898:	1c42      	adds	r2, r0, #1
 800289a:	4606      	mov	r6, r0
 800289c:	d1d6      	bne.n	800284c <_svfiprintf_r+0x174>
 800289e:	89ab      	ldrh	r3, [r5, #12]
 80028a0:	065b      	lsls	r3, r3, #25
 80028a2:	f53f af2d 	bmi.w	8002700 <_svfiprintf_r+0x28>
 80028a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028a8:	e72c      	b.n	8002704 <_svfiprintf_r+0x2c>
 80028aa:	ab03      	add	r3, sp, #12
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	462a      	mov	r2, r5
 80028b0:	4638      	mov	r0, r7
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <_svfiprintf_r+0x1f4>)
 80028b4:	a904      	add	r1, sp, #16
 80028b6:	f000 f9bd 	bl	8002c34 <_printf_i>
 80028ba:	e7ed      	b.n	8002898 <_svfiprintf_r+0x1c0>
 80028bc:	0800343a 	.word	0x0800343a
 80028c0:	08003440 	.word	0x08003440
 80028c4:	08003444 	.word	0x08003444
 80028c8:	00000000 	.word	0x00000000
 80028cc:	08002621 	.word	0x08002621

080028d0 <__sfputc_r>:
 80028d0:	6893      	ldr	r3, [r2, #8]
 80028d2:	b410      	push	{r4}
 80028d4:	3b01      	subs	r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	6093      	str	r3, [r2, #8]
 80028da:	da07      	bge.n	80028ec <__sfputc_r+0x1c>
 80028dc:	6994      	ldr	r4, [r2, #24]
 80028de:	42a3      	cmp	r3, r4
 80028e0:	db01      	blt.n	80028e6 <__sfputc_r+0x16>
 80028e2:	290a      	cmp	r1, #10
 80028e4:	d102      	bne.n	80028ec <__sfputc_r+0x1c>
 80028e6:	bc10      	pop	{r4}
 80028e8:	f000 bac4 	b.w	8002e74 <__swbuf_r>
 80028ec:	6813      	ldr	r3, [r2, #0]
 80028ee:	1c58      	adds	r0, r3, #1
 80028f0:	6010      	str	r0, [r2, #0]
 80028f2:	7019      	strb	r1, [r3, #0]
 80028f4:	4608      	mov	r0, r1
 80028f6:	bc10      	pop	{r4}
 80028f8:	4770      	bx	lr

080028fa <__sfputs_r>:
 80028fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fc:	4606      	mov	r6, r0
 80028fe:	460f      	mov	r7, r1
 8002900:	4614      	mov	r4, r2
 8002902:	18d5      	adds	r5, r2, r3
 8002904:	42ac      	cmp	r4, r5
 8002906:	d101      	bne.n	800290c <__sfputs_r+0x12>
 8002908:	2000      	movs	r0, #0
 800290a:	e007      	b.n	800291c <__sfputs_r+0x22>
 800290c:	463a      	mov	r2, r7
 800290e:	4630      	mov	r0, r6
 8002910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002914:	f7ff ffdc 	bl	80028d0 <__sfputc_r>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d1f3      	bne.n	8002904 <__sfputs_r+0xa>
 800291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002920 <_vfiprintf_r>:
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	460d      	mov	r5, r1
 8002926:	4614      	mov	r4, r2
 8002928:	4698      	mov	r8, r3
 800292a:	4606      	mov	r6, r0
 800292c:	b09d      	sub	sp, #116	@ 0x74
 800292e:	b118      	cbz	r0, 8002938 <_vfiprintf_r+0x18>
 8002930:	6a03      	ldr	r3, [r0, #32]
 8002932:	b90b      	cbnz	r3, 8002938 <_vfiprintf_r+0x18>
 8002934:	f7ff fc42 	bl	80021bc <__sinit>
 8002938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800293a:	07d9      	lsls	r1, r3, #31
 800293c:	d405      	bmi.n	800294a <_vfiprintf_r+0x2a>
 800293e:	89ab      	ldrh	r3, [r5, #12]
 8002940:	059a      	lsls	r2, r3, #22
 8002942:	d402      	bmi.n	800294a <_vfiprintf_r+0x2a>
 8002944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002946:	f7ff fd72 	bl	800242e <__retarget_lock_acquire_recursive>
 800294a:	89ab      	ldrh	r3, [r5, #12]
 800294c:	071b      	lsls	r3, r3, #28
 800294e:	d501      	bpl.n	8002954 <_vfiprintf_r+0x34>
 8002950:	692b      	ldr	r3, [r5, #16]
 8002952:	b99b      	cbnz	r3, 800297c <_vfiprintf_r+0x5c>
 8002954:	4629      	mov	r1, r5
 8002956:	4630      	mov	r0, r6
 8002958:	f000 faca 	bl	8002ef0 <__swsetup_r>
 800295c:	b170      	cbz	r0, 800297c <_vfiprintf_r+0x5c>
 800295e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002960:	07dc      	lsls	r4, r3, #31
 8002962:	d504      	bpl.n	800296e <_vfiprintf_r+0x4e>
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	b01d      	add	sp, #116	@ 0x74
 800296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296e:	89ab      	ldrh	r3, [r5, #12]
 8002970:	0598      	lsls	r0, r3, #22
 8002972:	d4f7      	bmi.n	8002964 <_vfiprintf_r+0x44>
 8002974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002976:	f7ff fd5b 	bl	8002430 <__retarget_lock_release_recursive>
 800297a:	e7f3      	b.n	8002964 <_vfiprintf_r+0x44>
 800297c:	2300      	movs	r3, #0
 800297e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002980:	2320      	movs	r3, #32
 8002982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002986:	2330      	movs	r3, #48	@ 0x30
 8002988:	f04f 0901 	mov.w	r9, #1
 800298c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002990:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002b3c <_vfiprintf_r+0x21c>
 8002994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002998:	4623      	mov	r3, r4
 800299a:	469a      	mov	sl, r3
 800299c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029a0:	b10a      	cbz	r2, 80029a6 <_vfiprintf_r+0x86>
 80029a2:	2a25      	cmp	r2, #37	@ 0x25
 80029a4:	d1f9      	bne.n	800299a <_vfiprintf_r+0x7a>
 80029a6:	ebba 0b04 	subs.w	fp, sl, r4
 80029aa:	d00b      	beq.n	80029c4 <_vfiprintf_r+0xa4>
 80029ac:	465b      	mov	r3, fp
 80029ae:	4622      	mov	r2, r4
 80029b0:	4629      	mov	r1, r5
 80029b2:	4630      	mov	r0, r6
 80029b4:	f7ff ffa1 	bl	80028fa <__sfputs_r>
 80029b8:	3001      	adds	r0, #1
 80029ba:	f000 80a7 	beq.w	8002b0c <_vfiprintf_r+0x1ec>
 80029be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029c0:	445a      	add	r2, fp
 80029c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80029c4:	f89a 3000 	ldrb.w	r3, [sl]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 809f 	beq.w	8002b0c <_vfiprintf_r+0x1ec>
 80029ce:	2300      	movs	r3, #0
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029d8:	f10a 0a01 	add.w	sl, sl, #1
 80029dc:	9304      	str	r3, [sp, #16]
 80029de:	9307      	str	r3, [sp, #28]
 80029e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80029e6:	4654      	mov	r4, sl
 80029e8:	2205      	movs	r2, #5
 80029ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ee:	4853      	ldr	r0, [pc, #332]	@ (8002b3c <_vfiprintf_r+0x21c>)
 80029f0:	f000 fafe 	bl	8002ff0 <memchr>
 80029f4:	9a04      	ldr	r2, [sp, #16]
 80029f6:	b9d8      	cbnz	r0, 8002a30 <_vfiprintf_r+0x110>
 80029f8:	06d1      	lsls	r1, r2, #27
 80029fa:	bf44      	itt	mi
 80029fc:	2320      	movmi	r3, #32
 80029fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a02:	0713      	lsls	r3, r2, #28
 8002a04:	bf44      	itt	mi
 8002a06:	232b      	movmi	r3, #43	@ 0x2b
 8002a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a12:	d015      	beq.n	8002a40 <_vfiprintf_r+0x120>
 8002a14:	4654      	mov	r4, sl
 8002a16:	2000      	movs	r0, #0
 8002a18:	f04f 0c0a 	mov.w	ip, #10
 8002a1c:	9a07      	ldr	r2, [sp, #28]
 8002a1e:	4621      	mov	r1, r4
 8002a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a24:	3b30      	subs	r3, #48	@ 0x30
 8002a26:	2b09      	cmp	r3, #9
 8002a28:	d94b      	bls.n	8002ac2 <_vfiprintf_r+0x1a2>
 8002a2a:	b1b0      	cbz	r0, 8002a5a <_vfiprintf_r+0x13a>
 8002a2c:	9207      	str	r2, [sp, #28]
 8002a2e:	e014      	b.n	8002a5a <_vfiprintf_r+0x13a>
 8002a30:	eba0 0308 	sub.w	r3, r0, r8
 8002a34:	fa09 f303 	lsl.w	r3, r9, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	46a2      	mov	sl, r4
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	e7d2      	b.n	80029e6 <_vfiprintf_r+0xc6>
 8002a40:	9b03      	ldr	r3, [sp, #12]
 8002a42:	1d19      	adds	r1, r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	9103      	str	r1, [sp, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bfbb      	ittet	lt
 8002a4c:	425b      	neglt	r3, r3
 8002a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8002a52:	9307      	strge	r3, [sp, #28]
 8002a54:	9307      	strlt	r3, [sp, #28]
 8002a56:	bfb8      	it	lt
 8002a58:	9204      	strlt	r2, [sp, #16]
 8002a5a:	7823      	ldrb	r3, [r4, #0]
 8002a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a5e:	d10a      	bne.n	8002a76 <_vfiprintf_r+0x156>
 8002a60:	7863      	ldrb	r3, [r4, #1]
 8002a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a64:	d132      	bne.n	8002acc <_vfiprintf_r+0x1ac>
 8002a66:	9b03      	ldr	r3, [sp, #12]
 8002a68:	3402      	adds	r4, #2
 8002a6a:	1d1a      	adds	r2, r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	9203      	str	r2, [sp, #12]
 8002a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a74:	9305      	str	r3, [sp, #20]
 8002a76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002b40 <_vfiprintf_r+0x220>
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	4650      	mov	r0, sl
 8002a7e:	7821      	ldrb	r1, [r4, #0]
 8002a80:	f000 fab6 	bl	8002ff0 <memchr>
 8002a84:	b138      	cbz	r0, 8002a96 <_vfiprintf_r+0x176>
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	9b04      	ldr	r3, [sp, #16]
 8002a8a:	eba0 000a 	sub.w	r0, r0, sl
 8002a8e:	4082      	lsls	r2, r0
 8002a90:	4313      	orrs	r3, r2
 8002a92:	3401      	adds	r4, #1
 8002a94:	9304      	str	r3, [sp, #16]
 8002a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9a:	2206      	movs	r2, #6
 8002a9c:	4829      	ldr	r0, [pc, #164]	@ (8002b44 <_vfiprintf_r+0x224>)
 8002a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002aa2:	f000 faa5 	bl	8002ff0 <memchr>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d03f      	beq.n	8002b2a <_vfiprintf_r+0x20a>
 8002aaa:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <_vfiprintf_r+0x228>)
 8002aac:	bb1b      	cbnz	r3, 8002af6 <_vfiprintf_r+0x1d6>
 8002aae:	9b03      	ldr	r3, [sp, #12]
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	f023 0307 	bic.w	r3, r3, #7
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	9303      	str	r3, [sp, #12]
 8002aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002abc:	443b      	add	r3, r7
 8002abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ac0:	e76a      	b.n	8002998 <_vfiprintf_r+0x78>
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aca:	e7a8      	b.n	8002a1e <_vfiprintf_r+0xfe>
 8002acc:	2300      	movs	r3, #0
 8002ace:	f04f 0c0a 	mov.w	ip, #10
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	3401      	adds	r4, #1
 8002ad6:	9305      	str	r3, [sp, #20]
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ade:	3a30      	subs	r2, #48	@ 0x30
 8002ae0:	2a09      	cmp	r2, #9
 8002ae2:	d903      	bls.n	8002aec <_vfiprintf_r+0x1cc>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0c6      	beq.n	8002a76 <_vfiprintf_r+0x156>
 8002ae8:	9105      	str	r1, [sp, #20]
 8002aea:	e7c4      	b.n	8002a76 <_vfiprintf_r+0x156>
 8002aec:	4604      	mov	r4, r0
 8002aee:	2301      	movs	r3, #1
 8002af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002af4:	e7f0      	b.n	8002ad8 <_vfiprintf_r+0x1b8>
 8002af6:	ab03      	add	r3, sp, #12
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	462a      	mov	r2, r5
 8002afc:	4630      	mov	r0, r6
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <_vfiprintf_r+0x22c>)
 8002b00:	a904      	add	r1, sp, #16
 8002b02:	f3af 8000 	nop.w
 8002b06:	4607      	mov	r7, r0
 8002b08:	1c78      	adds	r0, r7, #1
 8002b0a:	d1d6      	bne.n	8002aba <_vfiprintf_r+0x19a>
 8002b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b0e:	07d9      	lsls	r1, r3, #31
 8002b10:	d405      	bmi.n	8002b1e <_vfiprintf_r+0x1fe>
 8002b12:	89ab      	ldrh	r3, [r5, #12]
 8002b14:	059a      	lsls	r2, r3, #22
 8002b16:	d402      	bmi.n	8002b1e <_vfiprintf_r+0x1fe>
 8002b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b1a:	f7ff fc89 	bl	8002430 <__retarget_lock_release_recursive>
 8002b1e:	89ab      	ldrh	r3, [r5, #12]
 8002b20:	065b      	lsls	r3, r3, #25
 8002b22:	f53f af1f 	bmi.w	8002964 <_vfiprintf_r+0x44>
 8002b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b28:	e71e      	b.n	8002968 <_vfiprintf_r+0x48>
 8002b2a:	ab03      	add	r3, sp, #12
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	462a      	mov	r2, r5
 8002b30:	4630      	mov	r0, r6
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <_vfiprintf_r+0x22c>)
 8002b34:	a904      	add	r1, sp, #16
 8002b36:	f000 f87d 	bl	8002c34 <_printf_i>
 8002b3a:	e7e4      	b.n	8002b06 <_vfiprintf_r+0x1e6>
 8002b3c:	0800343a 	.word	0x0800343a
 8002b40:	08003440 	.word	0x08003440
 8002b44:	08003444 	.word	0x08003444
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	080028fb 	.word	0x080028fb

08002b50 <_printf_common>:
 8002b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b54:	4616      	mov	r6, r2
 8002b56:	4698      	mov	r8, r3
 8002b58:	688a      	ldr	r2, [r1, #8]
 8002b5a:	690b      	ldr	r3, [r1, #16]
 8002b5c:	4607      	mov	r7, r0
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	bfb8      	it	lt
 8002b62:	4613      	movlt	r3, r2
 8002b64:	6033      	str	r3, [r6, #0]
 8002b66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b70:	b10a      	cbz	r2, 8002b76 <_printf_common+0x26>
 8002b72:	3301      	adds	r3, #1
 8002b74:	6033      	str	r3, [r6, #0]
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	0699      	lsls	r1, r3, #26
 8002b7a:	bf42      	ittt	mi
 8002b7c:	6833      	ldrmi	r3, [r6, #0]
 8002b7e:	3302      	addmi	r3, #2
 8002b80:	6033      	strmi	r3, [r6, #0]
 8002b82:	6825      	ldr	r5, [r4, #0]
 8002b84:	f015 0506 	ands.w	r5, r5, #6
 8002b88:	d106      	bne.n	8002b98 <_printf_common+0x48>
 8002b8a:	f104 0a19 	add.w	sl, r4, #25
 8002b8e:	68e3      	ldr	r3, [r4, #12]
 8002b90:	6832      	ldr	r2, [r6, #0]
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	42ab      	cmp	r3, r5
 8002b96:	dc2b      	bgt.n	8002bf0 <_printf_common+0xa0>
 8002b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b9c:	6822      	ldr	r2, [r4, #0]
 8002b9e:	3b00      	subs	r3, #0
 8002ba0:	bf18      	it	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	0692      	lsls	r2, r2, #26
 8002ba6:	d430      	bmi.n	8002c0a <_printf_common+0xba>
 8002ba8:	4641      	mov	r1, r8
 8002baa:	4638      	mov	r0, r7
 8002bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bb0:	47c8      	blx	r9
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	d023      	beq.n	8002bfe <_printf_common+0xae>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	6922      	ldr	r2, [r4, #16]
 8002bba:	f003 0306 	and.w	r3, r3, #6
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf14      	ite	ne
 8002bc2:	2500      	movne	r5, #0
 8002bc4:	6833      	ldreq	r3, [r6, #0]
 8002bc6:	f04f 0600 	mov.w	r6, #0
 8002bca:	bf08      	it	eq
 8002bcc:	68e5      	ldreq	r5, [r4, #12]
 8002bce:	f104 041a 	add.w	r4, r4, #26
 8002bd2:	bf08      	it	eq
 8002bd4:	1aed      	subeq	r5, r5, r3
 8002bd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002bda:	bf08      	it	eq
 8002bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002be0:	4293      	cmp	r3, r2
 8002be2:	bfc4      	itt	gt
 8002be4:	1a9b      	subgt	r3, r3, r2
 8002be6:	18ed      	addgt	r5, r5, r3
 8002be8:	42b5      	cmp	r5, r6
 8002bea:	d11a      	bne.n	8002c22 <_printf_common+0xd2>
 8002bec:	2000      	movs	r0, #0
 8002bee:	e008      	b.n	8002c02 <_printf_common+0xb2>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4652      	mov	r2, sl
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	47c8      	blx	r9
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	d103      	bne.n	8002c06 <_printf_common+0xb6>
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c06:	3501      	adds	r5, #1
 8002c08:	e7c1      	b.n	8002b8e <_printf_common+0x3e>
 8002c0a:	2030      	movs	r0, #48	@ 0x30
 8002c0c:	18e1      	adds	r1, r4, r3
 8002c0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c18:	4422      	add	r2, r4
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c20:	e7c2      	b.n	8002ba8 <_printf_common+0x58>
 8002c22:	2301      	movs	r3, #1
 8002c24:	4622      	mov	r2, r4
 8002c26:	4641      	mov	r1, r8
 8002c28:	4638      	mov	r0, r7
 8002c2a:	47c8      	blx	r9
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d0e6      	beq.n	8002bfe <_printf_common+0xae>
 8002c30:	3601      	adds	r6, #1
 8002c32:	e7d9      	b.n	8002be8 <_printf_common+0x98>

08002c34 <_printf_i>:
 8002c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c38:	7e0f      	ldrb	r7, [r1, #24]
 8002c3a:	4691      	mov	r9, r2
 8002c3c:	2f78      	cmp	r7, #120	@ 0x78
 8002c3e:	4680      	mov	r8, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	469a      	mov	sl, r3
 8002c44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c4a:	d807      	bhi.n	8002c5c <_printf_i+0x28>
 8002c4c:	2f62      	cmp	r7, #98	@ 0x62
 8002c4e:	d80a      	bhi.n	8002c66 <_printf_i+0x32>
 8002c50:	2f00      	cmp	r7, #0
 8002c52:	f000 80d3 	beq.w	8002dfc <_printf_i+0x1c8>
 8002c56:	2f58      	cmp	r7, #88	@ 0x58
 8002c58:	f000 80ba 	beq.w	8002dd0 <_printf_i+0x19c>
 8002c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c64:	e03a      	b.n	8002cdc <_printf_i+0xa8>
 8002c66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c6a:	2b15      	cmp	r3, #21
 8002c6c:	d8f6      	bhi.n	8002c5c <_printf_i+0x28>
 8002c6e:	a101      	add	r1, pc, #4	@ (adr r1, 8002c74 <_printf_i+0x40>)
 8002c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c74:	08002ccd 	.word	0x08002ccd
 8002c78:	08002ce1 	.word	0x08002ce1
 8002c7c:	08002c5d 	.word	0x08002c5d
 8002c80:	08002c5d 	.word	0x08002c5d
 8002c84:	08002c5d 	.word	0x08002c5d
 8002c88:	08002c5d 	.word	0x08002c5d
 8002c8c:	08002ce1 	.word	0x08002ce1
 8002c90:	08002c5d 	.word	0x08002c5d
 8002c94:	08002c5d 	.word	0x08002c5d
 8002c98:	08002c5d 	.word	0x08002c5d
 8002c9c:	08002c5d 	.word	0x08002c5d
 8002ca0:	08002de3 	.word	0x08002de3
 8002ca4:	08002d0b 	.word	0x08002d0b
 8002ca8:	08002d9d 	.word	0x08002d9d
 8002cac:	08002c5d 	.word	0x08002c5d
 8002cb0:	08002c5d 	.word	0x08002c5d
 8002cb4:	08002e05 	.word	0x08002e05
 8002cb8:	08002c5d 	.word	0x08002c5d
 8002cbc:	08002d0b 	.word	0x08002d0b
 8002cc0:	08002c5d 	.word	0x08002c5d
 8002cc4:	08002c5d 	.word	0x08002c5d
 8002cc8:	08002da5 	.word	0x08002da5
 8002ccc:	6833      	ldr	r3, [r6, #0]
 8002cce:	1d1a      	adds	r2, r3, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6032      	str	r2, [r6, #0]
 8002cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e09e      	b.n	8002e1e <_printf_i+0x1ea>
 8002ce0:	6833      	ldr	r3, [r6, #0]
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	1d19      	adds	r1, r3, #4
 8002ce6:	6031      	str	r1, [r6, #0]
 8002ce8:	0606      	lsls	r6, r0, #24
 8002cea:	d501      	bpl.n	8002cf0 <_printf_i+0xbc>
 8002cec:	681d      	ldr	r5, [r3, #0]
 8002cee:	e003      	b.n	8002cf8 <_printf_i+0xc4>
 8002cf0:	0645      	lsls	r5, r0, #25
 8002cf2:	d5fb      	bpl.n	8002cec <_printf_i+0xb8>
 8002cf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002cf8:	2d00      	cmp	r5, #0
 8002cfa:	da03      	bge.n	8002d04 <_printf_i+0xd0>
 8002cfc:	232d      	movs	r3, #45	@ 0x2d
 8002cfe:	426d      	negs	r5, r5
 8002d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d04:	230a      	movs	r3, #10
 8002d06:	4859      	ldr	r0, [pc, #356]	@ (8002e6c <_printf_i+0x238>)
 8002d08:	e011      	b.n	8002d2e <_printf_i+0xfa>
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	6833      	ldr	r3, [r6, #0]
 8002d0e:	0608      	lsls	r0, r1, #24
 8002d10:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d14:	d402      	bmi.n	8002d1c <_printf_i+0xe8>
 8002d16:	0649      	lsls	r1, r1, #25
 8002d18:	bf48      	it	mi
 8002d1a:	b2ad      	uxthmi	r5, r5
 8002d1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d1e:	6033      	str	r3, [r6, #0]
 8002d20:	bf14      	ite	ne
 8002d22:	230a      	movne	r3, #10
 8002d24:	2308      	moveq	r3, #8
 8002d26:	4851      	ldr	r0, [pc, #324]	@ (8002e6c <_printf_i+0x238>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d2e:	6866      	ldr	r6, [r4, #4]
 8002d30:	2e00      	cmp	r6, #0
 8002d32:	bfa8      	it	ge
 8002d34:	6821      	ldrge	r1, [r4, #0]
 8002d36:	60a6      	str	r6, [r4, #8]
 8002d38:	bfa4      	itt	ge
 8002d3a:	f021 0104 	bicge.w	r1, r1, #4
 8002d3e:	6021      	strge	r1, [r4, #0]
 8002d40:	b90d      	cbnz	r5, 8002d46 <_printf_i+0x112>
 8002d42:	2e00      	cmp	r6, #0
 8002d44:	d04b      	beq.n	8002dde <_printf_i+0x1aa>
 8002d46:	4616      	mov	r6, r2
 8002d48:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d4c:	fb03 5711 	mls	r7, r3, r1, r5
 8002d50:	5dc7      	ldrb	r7, [r0, r7]
 8002d52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d56:	462f      	mov	r7, r5
 8002d58:	42bb      	cmp	r3, r7
 8002d5a:	460d      	mov	r5, r1
 8002d5c:	d9f4      	bls.n	8002d48 <_printf_i+0x114>
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d10b      	bne.n	8002d7a <_printf_i+0x146>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	07df      	lsls	r7, r3, #31
 8002d66:	d508      	bpl.n	8002d7a <_printf_i+0x146>
 8002d68:	6923      	ldr	r3, [r4, #16]
 8002d6a:	6861      	ldr	r1, [r4, #4]
 8002d6c:	4299      	cmp	r1, r3
 8002d6e:	bfde      	ittt	le
 8002d70:	2330      	movle	r3, #48	@ 0x30
 8002d72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d7a:	1b92      	subs	r2, r2, r6
 8002d7c:	6122      	str	r2, [r4, #16]
 8002d7e:	464b      	mov	r3, r9
 8002d80:	4621      	mov	r1, r4
 8002d82:	4640      	mov	r0, r8
 8002d84:	f8cd a000 	str.w	sl, [sp]
 8002d88:	aa03      	add	r2, sp, #12
 8002d8a:	f7ff fee1 	bl	8002b50 <_printf_common>
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d14a      	bne.n	8002e28 <_printf_i+0x1f4>
 8002d92:	f04f 30ff 	mov.w	r0, #4294967295
 8002d96:	b004      	add	sp, #16
 8002d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	f043 0320 	orr.w	r3, r3, #32
 8002da2:	6023      	str	r3, [r4, #0]
 8002da4:	2778      	movs	r7, #120	@ 0x78
 8002da6:	4832      	ldr	r0, [pc, #200]	@ (8002e70 <_printf_i+0x23c>)
 8002da8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	6831      	ldr	r1, [r6, #0]
 8002db0:	061f      	lsls	r7, r3, #24
 8002db2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002db6:	d402      	bmi.n	8002dbe <_printf_i+0x18a>
 8002db8:	065f      	lsls	r7, r3, #25
 8002dba:	bf48      	it	mi
 8002dbc:	b2ad      	uxthmi	r5, r5
 8002dbe:	6031      	str	r1, [r6, #0]
 8002dc0:	07d9      	lsls	r1, r3, #31
 8002dc2:	bf44      	itt	mi
 8002dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8002dc8:	6023      	strmi	r3, [r4, #0]
 8002dca:	b11d      	cbz	r5, 8002dd4 <_printf_i+0x1a0>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	e7ab      	b.n	8002d28 <_printf_i+0xf4>
 8002dd0:	4826      	ldr	r0, [pc, #152]	@ (8002e6c <_printf_i+0x238>)
 8002dd2:	e7e9      	b.n	8002da8 <_printf_i+0x174>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f023 0320 	bic.w	r3, r3, #32
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	e7f6      	b.n	8002dcc <_printf_i+0x198>
 8002dde:	4616      	mov	r6, r2
 8002de0:	e7bd      	b.n	8002d5e <_printf_i+0x12a>
 8002de2:	6833      	ldr	r3, [r6, #0]
 8002de4:	6825      	ldr	r5, [r4, #0]
 8002de6:	1d18      	adds	r0, r3, #4
 8002de8:	6961      	ldr	r1, [r4, #20]
 8002dea:	6030      	str	r0, [r6, #0]
 8002dec:	062e      	lsls	r6, r5, #24
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	d501      	bpl.n	8002df6 <_printf_i+0x1c2>
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	e002      	b.n	8002dfc <_printf_i+0x1c8>
 8002df6:	0668      	lsls	r0, r5, #25
 8002df8:	d5fb      	bpl.n	8002df2 <_printf_i+0x1be>
 8002dfa:	8019      	strh	r1, [r3, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	4616      	mov	r6, r2
 8002e00:	6123      	str	r3, [r4, #16]
 8002e02:	e7bc      	b.n	8002d7e <_printf_i+0x14a>
 8002e04:	6833      	ldr	r3, [r6, #0]
 8002e06:	2100      	movs	r1, #0
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	6032      	str	r2, [r6, #0]
 8002e0c:	681e      	ldr	r6, [r3, #0]
 8002e0e:	6862      	ldr	r2, [r4, #4]
 8002e10:	4630      	mov	r0, r6
 8002e12:	f000 f8ed 	bl	8002ff0 <memchr>
 8002e16:	b108      	cbz	r0, 8002e1c <_printf_i+0x1e8>
 8002e18:	1b80      	subs	r0, r0, r6
 8002e1a:	6060      	str	r0, [r4, #4]
 8002e1c:	6863      	ldr	r3, [r4, #4]
 8002e1e:	6123      	str	r3, [r4, #16]
 8002e20:	2300      	movs	r3, #0
 8002e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e26:	e7aa      	b.n	8002d7e <_printf_i+0x14a>
 8002e28:	4632      	mov	r2, r6
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	6923      	ldr	r3, [r4, #16]
 8002e30:	47d0      	blx	sl
 8002e32:	3001      	adds	r0, #1
 8002e34:	d0ad      	beq.n	8002d92 <_printf_i+0x15e>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	079b      	lsls	r3, r3, #30
 8002e3a:	d413      	bmi.n	8002e64 <_printf_i+0x230>
 8002e3c:	68e0      	ldr	r0, [r4, #12]
 8002e3e:	9b03      	ldr	r3, [sp, #12]
 8002e40:	4298      	cmp	r0, r3
 8002e42:	bfb8      	it	lt
 8002e44:	4618      	movlt	r0, r3
 8002e46:	e7a6      	b.n	8002d96 <_printf_i+0x162>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	4632      	mov	r2, r6
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	4640      	mov	r0, r8
 8002e50:	47d0      	blx	sl
 8002e52:	3001      	adds	r0, #1
 8002e54:	d09d      	beq.n	8002d92 <_printf_i+0x15e>
 8002e56:	3501      	adds	r5, #1
 8002e58:	68e3      	ldr	r3, [r4, #12]
 8002e5a:	9903      	ldr	r1, [sp, #12]
 8002e5c:	1a5b      	subs	r3, r3, r1
 8002e5e:	42ab      	cmp	r3, r5
 8002e60:	dcf2      	bgt.n	8002e48 <_printf_i+0x214>
 8002e62:	e7eb      	b.n	8002e3c <_printf_i+0x208>
 8002e64:	2500      	movs	r5, #0
 8002e66:	f104 0619 	add.w	r6, r4, #25
 8002e6a:	e7f5      	b.n	8002e58 <_printf_i+0x224>
 8002e6c:	0800344b 	.word	0x0800344b
 8002e70:	0800345c 	.word	0x0800345c

08002e74 <__swbuf_r>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	460e      	mov	r6, r1
 8002e78:	4614      	mov	r4, r2
 8002e7a:	4605      	mov	r5, r0
 8002e7c:	b118      	cbz	r0, 8002e86 <__swbuf_r+0x12>
 8002e7e:	6a03      	ldr	r3, [r0, #32]
 8002e80:	b90b      	cbnz	r3, 8002e86 <__swbuf_r+0x12>
 8002e82:	f7ff f99b 	bl	80021bc <__sinit>
 8002e86:	69a3      	ldr	r3, [r4, #24]
 8002e88:	60a3      	str	r3, [r4, #8]
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	071a      	lsls	r2, r3, #28
 8002e8e:	d501      	bpl.n	8002e94 <__swbuf_r+0x20>
 8002e90:	6923      	ldr	r3, [r4, #16]
 8002e92:	b943      	cbnz	r3, 8002ea6 <__swbuf_r+0x32>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	f000 f82a 	bl	8002ef0 <__swsetup_r>
 8002e9c:	b118      	cbz	r0, 8002ea6 <__swbuf_r+0x32>
 8002e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	6922      	ldr	r2, [r4, #16]
 8002eaa:	b2f6      	uxtb	r6, r6
 8002eac:	1a98      	subs	r0, r3, r2
 8002eae:	6963      	ldr	r3, [r4, #20]
 8002eb0:	4637      	mov	r7, r6
 8002eb2:	4283      	cmp	r3, r0
 8002eb4:	dc05      	bgt.n	8002ec2 <__swbuf_r+0x4e>
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f7ff f8b7 	bl	800202c <_fflush_r>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d1ed      	bne.n	8002e9e <__swbuf_r+0x2a>
 8002ec2:	68a3      	ldr	r3, [r4, #8]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60a3      	str	r3, [r4, #8]
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	6022      	str	r2, [r4, #0]
 8002ece:	701e      	strb	r6, [r3, #0]
 8002ed0:	6962      	ldr	r2, [r4, #20]
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d004      	beq.n	8002ee2 <__swbuf_r+0x6e>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	07db      	lsls	r3, r3, #31
 8002edc:	d5e1      	bpl.n	8002ea2 <__swbuf_r+0x2e>
 8002ede:	2e0a      	cmp	r6, #10
 8002ee0:	d1df      	bne.n	8002ea2 <__swbuf_r+0x2e>
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7ff f8a1 	bl	800202c <_fflush_r>
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d0d9      	beq.n	8002ea2 <__swbuf_r+0x2e>
 8002eee:	e7d6      	b.n	8002e9e <__swbuf_r+0x2a>

08002ef0 <__swsetup_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <__swsetup_r+0xa8>)
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	460c      	mov	r4, r1
 8002efa:	b118      	cbz	r0, 8002f04 <__swsetup_r+0x14>
 8002efc:	6a03      	ldr	r3, [r0, #32]
 8002efe:	b90b      	cbnz	r3, 8002f04 <__swsetup_r+0x14>
 8002f00:	f7ff f95c 	bl	80021bc <__sinit>
 8002f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f08:	0719      	lsls	r1, r3, #28
 8002f0a:	d422      	bmi.n	8002f52 <__swsetup_r+0x62>
 8002f0c:	06da      	lsls	r2, r3, #27
 8002f0e:	d407      	bmi.n	8002f20 <__swsetup_r+0x30>
 8002f10:	2209      	movs	r2, #9
 8002f12:	602a      	str	r2, [r5, #0]
 8002f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	e033      	b.n	8002f88 <__swsetup_r+0x98>
 8002f20:	0758      	lsls	r0, r3, #29
 8002f22:	d512      	bpl.n	8002f4a <__swsetup_r+0x5a>
 8002f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f26:	b141      	cbz	r1, 8002f3a <__swsetup_r+0x4a>
 8002f28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f2c:	4299      	cmp	r1, r3
 8002f2e:	d002      	beq.n	8002f36 <__swsetup_r+0x46>
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7ff fa7f 	bl	8002434 <_free_r>
 8002f36:	2300      	movs	r3, #0
 8002f38:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f40:	81a3      	strh	r3, [r4, #12]
 8002f42:	2300      	movs	r3, #0
 8002f44:	6063      	str	r3, [r4, #4]
 8002f46:	6923      	ldr	r3, [r4, #16]
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	89a3      	ldrh	r3, [r4, #12]
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	81a3      	strh	r3, [r4, #12]
 8002f52:	6923      	ldr	r3, [r4, #16]
 8002f54:	b94b      	cbnz	r3, 8002f6a <__swsetup_r+0x7a>
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f60:	d003      	beq.n	8002f6a <__swsetup_r+0x7a>
 8002f62:	4621      	mov	r1, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	f000 f8b2 	bl	80030ce <__smakebuf_r>
 8002f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f6e:	f013 0201 	ands.w	r2, r3, #1
 8002f72:	d00a      	beq.n	8002f8a <__swsetup_r+0x9a>
 8002f74:	2200      	movs	r2, #0
 8002f76:	60a2      	str	r2, [r4, #8]
 8002f78:	6962      	ldr	r2, [r4, #20]
 8002f7a:	4252      	negs	r2, r2
 8002f7c:	61a2      	str	r2, [r4, #24]
 8002f7e:	6922      	ldr	r2, [r4, #16]
 8002f80:	b942      	cbnz	r2, 8002f94 <__swsetup_r+0xa4>
 8002f82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f86:	d1c5      	bne.n	8002f14 <__swsetup_r+0x24>
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	0799      	lsls	r1, r3, #30
 8002f8c:	bf58      	it	pl
 8002f8e:	6962      	ldrpl	r2, [r4, #20]
 8002f90:	60a2      	str	r2, [r4, #8]
 8002f92:	e7f4      	b.n	8002f7e <__swsetup_r+0x8e>
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7f7      	b.n	8002f88 <__swsetup_r+0x98>
 8002f98:	2000005c 	.word	0x2000005c

08002f9c <memmove>:
 8002f9c:	4288      	cmp	r0, r1
 8002f9e:	b510      	push	{r4, lr}
 8002fa0:	eb01 0402 	add.w	r4, r1, r2
 8002fa4:	d902      	bls.n	8002fac <memmove+0x10>
 8002fa6:	4284      	cmp	r4, r0
 8002fa8:	4623      	mov	r3, r4
 8002faa:	d807      	bhi.n	8002fbc <memmove+0x20>
 8002fac:	1e43      	subs	r3, r0, #1
 8002fae:	42a1      	cmp	r1, r4
 8002fb0:	d008      	beq.n	8002fc4 <memmove+0x28>
 8002fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fba:	e7f8      	b.n	8002fae <memmove+0x12>
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	4402      	add	r2, r0
 8002fc0:	428a      	cmp	r2, r1
 8002fc2:	d100      	bne.n	8002fc6 <memmove+0x2a>
 8002fc4:	bd10      	pop	{r4, pc}
 8002fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fce:	e7f7      	b.n	8002fc0 <memmove+0x24>

08002fd0 <_sbrk_r>:
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4d05      	ldr	r5, [pc, #20]	@ (8002fec <_sbrk_r+0x1c>)
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	f7fd fbe4 	bl	80007a8 <_sbrk>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_sbrk_r+0x1a>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_sbrk_r+0x1a>
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	20000350 	.word	0x20000350

08002ff0 <memchr>:
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b510      	push	{r4, lr}
 8002ff4:	b2c9      	uxtb	r1, r1
 8002ff6:	4402      	add	r2, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	d101      	bne.n	8003002 <memchr+0x12>
 8002ffe:	2000      	movs	r0, #0
 8003000:	e003      	b.n	800300a <memchr+0x1a>
 8003002:	7804      	ldrb	r4, [r0, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	428c      	cmp	r4, r1
 8003008:	d1f6      	bne.n	8002ff8 <memchr+0x8>
 800300a:	bd10      	pop	{r4, pc}

0800300c <memcpy>:
 800300c:	440a      	add	r2, r1
 800300e:	4291      	cmp	r1, r2
 8003010:	f100 33ff 	add.w	r3, r0, #4294967295
 8003014:	d100      	bne.n	8003018 <memcpy+0xc>
 8003016:	4770      	bx	lr
 8003018:	b510      	push	{r4, lr}
 800301a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800301e:	4291      	cmp	r1, r2
 8003020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003024:	d1f9      	bne.n	800301a <memcpy+0xe>
 8003026:	bd10      	pop	{r4, pc}

08003028 <_realloc_r>:
 8003028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302c:	4680      	mov	r8, r0
 800302e:	4615      	mov	r5, r2
 8003030:	460c      	mov	r4, r1
 8003032:	b921      	cbnz	r1, 800303e <_realloc_r+0x16>
 8003034:	4611      	mov	r1, r2
 8003036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800303a:	f7ff ba65 	b.w	8002508 <_malloc_r>
 800303e:	b92a      	cbnz	r2, 800304c <_realloc_r+0x24>
 8003040:	f7ff f9f8 	bl	8002434 <_free_r>
 8003044:	2400      	movs	r4, #0
 8003046:	4620      	mov	r0, r4
 8003048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800304c:	f000 f89e 	bl	800318c <_malloc_usable_size_r>
 8003050:	4285      	cmp	r5, r0
 8003052:	4606      	mov	r6, r0
 8003054:	d802      	bhi.n	800305c <_realloc_r+0x34>
 8003056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800305a:	d8f4      	bhi.n	8003046 <_realloc_r+0x1e>
 800305c:	4629      	mov	r1, r5
 800305e:	4640      	mov	r0, r8
 8003060:	f7ff fa52 	bl	8002508 <_malloc_r>
 8003064:	4607      	mov	r7, r0
 8003066:	2800      	cmp	r0, #0
 8003068:	d0ec      	beq.n	8003044 <_realloc_r+0x1c>
 800306a:	42b5      	cmp	r5, r6
 800306c:	462a      	mov	r2, r5
 800306e:	4621      	mov	r1, r4
 8003070:	bf28      	it	cs
 8003072:	4632      	movcs	r2, r6
 8003074:	f7ff ffca 	bl	800300c <memcpy>
 8003078:	4621      	mov	r1, r4
 800307a:	4640      	mov	r0, r8
 800307c:	f7ff f9da 	bl	8002434 <_free_r>
 8003080:	463c      	mov	r4, r7
 8003082:	e7e0      	b.n	8003046 <_realloc_r+0x1e>

08003084 <__swhatbuf_r>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	460c      	mov	r4, r1
 8003088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800308c:	4615      	mov	r5, r2
 800308e:	2900      	cmp	r1, #0
 8003090:	461e      	mov	r6, r3
 8003092:	b096      	sub	sp, #88	@ 0x58
 8003094:	da0c      	bge.n	80030b0 <__swhatbuf_r+0x2c>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	2100      	movs	r1, #0
 800309a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800309e:	bf14      	ite	ne
 80030a0:	2340      	movne	r3, #64	@ 0x40
 80030a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80030a6:	2000      	movs	r0, #0
 80030a8:	6031      	str	r1, [r6, #0]
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	b016      	add	sp, #88	@ 0x58
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	466a      	mov	r2, sp
 80030b2:	f000 f849 	bl	8003148 <_fstat_r>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	dbed      	blt.n	8003096 <__swhatbuf_r+0x12>
 80030ba:	9901      	ldr	r1, [sp, #4]
 80030bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80030c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80030c4:	4259      	negs	r1, r3
 80030c6:	4159      	adcs	r1, r3
 80030c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030cc:	e7eb      	b.n	80030a6 <__swhatbuf_r+0x22>

080030ce <__smakebuf_r>:
 80030ce:	898b      	ldrh	r3, [r1, #12]
 80030d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030d2:	079d      	lsls	r5, r3, #30
 80030d4:	4606      	mov	r6, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	d507      	bpl.n	80030ea <__smakebuf_r+0x1c>
 80030da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80030de:	6023      	str	r3, [r4, #0]
 80030e0:	6123      	str	r3, [r4, #16]
 80030e2:	2301      	movs	r3, #1
 80030e4:	6163      	str	r3, [r4, #20]
 80030e6:	b003      	add	sp, #12
 80030e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ea:	466a      	mov	r2, sp
 80030ec:	ab01      	add	r3, sp, #4
 80030ee:	f7ff ffc9 	bl	8003084 <__swhatbuf_r>
 80030f2:	9f00      	ldr	r7, [sp, #0]
 80030f4:	4605      	mov	r5, r0
 80030f6:	4639      	mov	r1, r7
 80030f8:	4630      	mov	r0, r6
 80030fa:	f7ff fa05 	bl	8002508 <_malloc_r>
 80030fe:	b948      	cbnz	r0, 8003114 <__smakebuf_r+0x46>
 8003100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003104:	059a      	lsls	r2, r3, #22
 8003106:	d4ee      	bmi.n	80030e6 <__smakebuf_r+0x18>
 8003108:	f023 0303 	bic.w	r3, r3, #3
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	81a3      	strh	r3, [r4, #12]
 8003112:	e7e2      	b.n	80030da <__smakebuf_r+0xc>
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800311a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311e:	81a3      	strh	r3, [r4, #12]
 8003120:	9b01      	ldr	r3, [sp, #4]
 8003122:	6020      	str	r0, [r4, #0]
 8003124:	b15b      	cbz	r3, 800313e <__smakebuf_r+0x70>
 8003126:	4630      	mov	r0, r6
 8003128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800312c:	f000 f81e 	bl	800316c <_isatty_r>
 8003130:	b128      	cbz	r0, 800313e <__smakebuf_r+0x70>
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	f023 0303 	bic.w	r3, r3, #3
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	81a3      	strh	r3, [r4, #12]
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	431d      	orrs	r5, r3
 8003142:	81a5      	strh	r5, [r4, #12]
 8003144:	e7cf      	b.n	80030e6 <__smakebuf_r+0x18>
	...

08003148 <_fstat_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	2300      	movs	r3, #0
 800314c:	4d06      	ldr	r5, [pc, #24]	@ (8003168 <_fstat_r+0x20>)
 800314e:	4604      	mov	r4, r0
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	602b      	str	r3, [r5, #0]
 8003156:	f7fe febe 	bl	8001ed6 <_fstat>
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	d102      	bne.n	8003164 <_fstat_r+0x1c>
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	b103      	cbz	r3, 8003164 <_fstat_r+0x1c>
 8003162:	6023      	str	r3, [r4, #0]
 8003164:	bd38      	pop	{r3, r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	20000350 	.word	0x20000350

0800316c <_isatty_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	2300      	movs	r3, #0
 8003170:	4d05      	ldr	r5, [pc, #20]	@ (8003188 <_isatty_r+0x1c>)
 8003172:	4604      	mov	r4, r0
 8003174:	4608      	mov	r0, r1
 8003176:	602b      	str	r3, [r5, #0]
 8003178:	f7fe febb 	bl	8001ef2 <_isatty>
 800317c:	1c43      	adds	r3, r0, #1
 800317e:	d102      	bne.n	8003186 <_isatty_r+0x1a>
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	b103      	cbz	r3, 8003186 <_isatty_r+0x1a>
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	bd38      	pop	{r3, r4, r5, pc}
 8003188:	20000350 	.word	0x20000350

0800318c <_malloc_usable_size_r>:
 800318c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003190:	1f18      	subs	r0, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	bfbc      	itt	lt
 8003196:	580b      	ldrlt	r3, [r1, r0]
 8003198:	18c0      	addlt	r0, r0, r3
 800319a:	4770      	bx	lr

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
